; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f1xx_hal_dma.o --asm_dir=.\air_slave\ --list_dir=.\air_slave\ --depend=.\stm32f1xx_hal_dma.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_air_slave -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\stm32f1xx_hal_dma.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c]
                          THUMB

                          AREA ||i.DMA_SetConfig||, CODE, READONLY, ALIGN=1

                  DMA_SetConfig PROC
;;;861      */
;;;862    static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b530              PUSH     {r4,r5,lr}
;;;863    {
;;;864      /* Clear all flags */
;;;865      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000002  f8905040          LDRB     r5,[r0,#0x40]
000006  2401              MOVS     r4,#1
000008  40ac              LSLS     r4,r4,r5
00000a  6bc5              LDR      r5,[r0,#0x3c]
00000c  606c              STR      r4,[r5,#4]
;;;866    
;;;867      /* Configure DMA Channel data length */
;;;868      hdma->Instance->CNDTR = DataLength;
00000e  6804              LDR      r4,[r0,#0]
000010  6063              STR      r3,[r4,#4]
;;;869    
;;;870      /* Memory to Peripheral */
;;;871      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000012  6843              LDR      r3,[r0,#4]
000014  2b10              CMP      r3,#0x10
000016  6803              LDR      r3,[r0,#0]            ;863
000018  d003              BEQ      |L1.34|
;;;872      {
;;;873        /* Configure DMA Channel destination address */
;;;874        hdma->Instance->CPAR = DstAddress;
;;;875    
;;;876        /* Configure DMA Channel source address */
;;;877        hdma->Instance->CMAR = SrcAddress;
;;;878      }
;;;879      /* Peripheral to Memory */
;;;880      else
;;;881      {
;;;882        /* Configure DMA Channel source address */
;;;883        hdma->Instance->CPAR = SrcAddress;
00001a  6099              STR      r1,[r3,#8]
;;;884    
;;;885        /* Configure DMA Channel destination address */
;;;886        hdma->Instance->CMAR = DstAddress;
00001c  6800              LDR      r0,[r0,#0]
00001e  60c2              STR      r2,[r0,#0xc]
;;;887      }
;;;888    }
000020  bd30              POP      {r4,r5,pc}
                  |L1.34|
000022  609a              STR      r2,[r3,#8]            ;874
000024  6800              LDR      r0,[r0,#0]            ;877
000026  60c1              STR      r1,[r0,#0xc]          ;877
000028  bd30              POP      {r4,r5,pc}
;;;889    
                          ENDP


                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort PROC
;;;432      */
;;;433    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  6801              LDR      r1,[r0,#0]
;;;434    {
;;;435      HAL_StatusTypeDef status = HAL_OK;
;;;436    
;;;437      /* Disable DMA IT */
;;;438      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000002  680a              LDR      r2,[r1,#0]
000004  f022020e          BIC      r2,r2,#0xe
000008  600a              STR      r2,[r1,#0]
;;;439        
;;;440      /* Disable the channel */
;;;441      __HAL_DMA_DISABLE(hdma);
00000a  6801              LDR      r1,[r0,#0]
00000c  680a              LDR      r2,[r1,#0]
00000e  f0220201          BIC      r2,r2,#1
000012  600a              STR      r2,[r1,#0]
;;;442        
;;;443      /* Clear all flags */
;;;444      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000014  f8902040          LDRB     r2,[r0,#0x40]
000018  6bc3              LDR      r3,[r0,#0x3c]
00001a  2101              MOVS     r1,#1
00001c  fa01f202          LSL      r2,r1,r2
000020  605a              STR      r2,[r3,#4]
;;;445    
;;;446      /* Change the DMA state */
;;;447      hdma->State = HAL_DMA_STATE_READY;
000022  f8801021          STRB     r1,[r0,#0x21]
;;;448    
;;;449      /* Process Unlocked */
;;;450      __HAL_UNLOCK(hdma);      
000026  2100              MOVS     r1,#0
000028  f8801020          STRB     r1,[r0,#0x20]
;;;451      
;;;452      return status; 
00002c  4608              MOV      r0,r1
;;;453    }
00002e  4770              BX       lr
;;;454    
                          ENDP


                          AREA ||i.HAL_DMA_Abort_IT||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Abort_IT PROC
;;;460      */
;;;461    HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;462    {  
;;;463      HAL_StatusTypeDef status = HAL_OK;
;;;464      
;;;465      if(HAL_DMA_STATE_BUSY != hdma->State)
000002  f8901021          LDRB     r1,[r0,#0x21]
000006  2400              MOVS     r4,#0                 ;463
000008  2902              CMP      r1,#2
00000a  d003              BEQ      |L3.20|
;;;466      {
;;;467        /* no transfer ongoing */
;;;468        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00000c  2104              MOVS     r1,#4
00000e  6381              STR      r1,[r0,#0x38]
;;;469            
;;;470        status = HAL_ERROR;
000010  2401              MOVS     r4,#1
000012  e03d              B        |L3.144|
                  |L3.20|
;;;471      }
;;;472      else
;;;473      { 
;;;474        /* Disable DMA IT */
;;;475        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000014  6801              LDR      r1,[r0,#0]
000016  680a              LDR      r2,[r1,#0]
000018  f022020e          BIC      r2,r2,#0xe
00001c  600a              STR      r2,[r1,#0]
;;;476    
;;;477        /* Disable the channel */
;;;478        __HAL_DMA_DISABLE(hdma);
00001e  6801              LDR      r1,[r0,#0]
000020  680a              LDR      r2,[r1,#0]
000022  f0220201          BIC      r2,r2,#1
000026  600a              STR      r2,[r1,#0]
;;;479    
;;;480        /* Clear all flags */
;;;481        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
000028  4a1a              LDR      r2,|L3.148|
00002a  6801              LDR      r1,[r0,#0]
00002c  4291              CMP      r1,r2
00002e  d101              BNE      |L3.52|
000030  2101              MOVS     r1,#1
000032  e021              B        |L3.120|
                  |L3.52|
000034  4a17              LDR      r2,|L3.148|
000036  3214              ADDS     r2,r2,#0x14
000038  4291              CMP      r1,r2
00003a  d101              BNE      |L3.64|
00003c  2110              MOVS     r1,#0x10
00003e  e01b              B        |L3.120|
                  |L3.64|
000040  4a14              LDR      r2,|L3.148|
000042  3228              ADDS     r2,r2,#0x28
000044  4291              CMP      r1,r2
000046  d101              BNE      |L3.76|
000048  1589              ASRS     r1,r1,#22
00004a  e015              B        |L3.120|
                  |L3.76|
00004c  4a11              LDR      r2,|L3.148|
00004e  323c              ADDS     r2,r2,#0x3c
000050  4291              CMP      r1,r2
000052  d101              BNE      |L3.88|
000054  1489              ASRS     r1,r1,#18
000056  e00f              B        |L3.120|
                  |L3.88|
000058  4a0e              LDR      r2,|L3.148|
00005a  3250              ADDS     r2,r2,#0x50
00005c  4291              CMP      r1,r2
00005e  d102              BNE      |L3.102|
000060  f44f3180          MOV      r1,#0x10000
000064  e008              B        |L3.120|
                  |L3.102|
000066  4a0b              LDR      r2,|L3.148|
000068  3264              ADDS     r2,r2,#0x64
00006a  4291              CMP      r1,r2
00006c  d102              BNE      |L3.116|
00006e  f44f1180          MOV      r1,#0x100000
000072  e001              B        |L3.120|
                  |L3.116|
000074  f04f7180          MOV      r1,#0x1000000
                  |L3.120|
000078  4a06              LDR      r2,|L3.148|
00007a  3a08              SUBS     r2,r2,#8
00007c  6051              STR      r1,[r2,#4]
;;;482    
;;;483        /* Change the DMA state */
;;;484        hdma->State = HAL_DMA_STATE_READY;
00007e  2101              MOVS     r1,#1
000080  f8801021          STRB     r1,[r0,#0x21]
;;;485    
;;;486        /* Process Unlocked */
;;;487        __HAL_UNLOCK(hdma);
000084  2100              MOVS     r1,#0
000086  f8801020          STRB     r1,[r0,#0x20]
;;;488    
;;;489        /* Call User Abort callback */
;;;490        if(hdma->XferAbortCallback != NULL)
00008a  6b41              LDR      r1,[r0,#0x34]
00008c  b101              CBZ      r1,|L3.144|
;;;491        {
;;;492          hdma->XferAbortCallback(hdma);
00008e  4788              BLX      r1
                  |L3.144|
;;;493        } 
;;;494      }
;;;495      return status;
000090  4620              MOV      r0,r4
;;;496    }
000092  bd10              POP      {r4,pc}
;;;497    
                          ENDP

                  |L3.148|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DMA_DeInit PROC
;;;242      */
;;;243    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;244    {
000002  b308              CBZ      r0,|L4.72|
;;;245      /* Check the DMA handle allocation */
;;;246      if(hdma == NULL)
;;;247      {
;;;248        return HAL_ERROR;
;;;249      }
;;;250    
;;;251      /* Check the parameters */
;;;252      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;253    
;;;254      /* Disable the selected DMA Channelx */
;;;255      __HAL_DMA_DISABLE(hdma);
000004  6801              LDR      r1,[r0,#0]
000006  680a              LDR      r2,[r1,#0]
000008  f0220201          BIC      r2,r2,#1
00000c  600a              STR      r2,[r1,#0]
;;;256    
;;;257      /* Reset DMA Channel control register */
;;;258      hdma->Instance->CCR  = 0U;
00000e  6802              LDR      r2,[r0,#0]
000010  2100              MOVS     r1,#0
000012  6011              STR      r1,[r2,#0]
;;;259    
;;;260      /* Reset DMA Channel Number of Data to Transfer register */
;;;261      hdma->Instance->CNDTR = 0U;
000014  6802              LDR      r2,[r0,#0]
000016  6051              STR      r1,[r2,#4]
;;;262    
;;;263      /* Reset DMA Channel peripheral address register */
;;;264      hdma->Instance->CPAR  = 0U;
000018  6802              LDR      r2,[r0,#0]
00001a  6091              STR      r1,[r2,#8]
;;;265    
;;;266      /* Reset DMA Channel memory address register */
;;;267      hdma->Instance->CMAR = 0U;
00001c  6802              LDR      r2,[r0,#0]
00001e  60d1              STR      r1,[r2,#0xc]
;;;268    
;;;269    #if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
;;;270      /* calculation of the channel index */
;;;271      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
;;;272      {
;;;273        /* DMA1 */
;;;274        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;275        hdma->DmaBaseAddress = DMA1;
;;;276      }
;;;277      else 
;;;278      {
;;;279        /* DMA2 */
;;;280        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;281        hdma->DmaBaseAddress = DMA2;
;;;282      }
;;;283    #else
;;;284      /* DMA1 */
;;;285      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
000020  4b0a              LDR      r3,|L4.76|
000022  6802              LDR      r2,[r0,#0]
;;;286      hdma->DmaBaseAddress = DMA1;
;;;287    #endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */
;;;288    
;;;289      /* Clear all flags */
;;;290      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
000024  2401              MOVS     r4,#1
000026  441a              ADD      r2,r2,r3              ;285
000028  2314              MOVS     r3,#0x14              ;285
00002a  fbb2f2f3          UDIV     r2,r2,r3              ;285
00002e  0093              LSLS     r3,r2,#2              ;285
000030  4a07              LDR      r2,|L4.80|
000032  e9c0230f          STRD     r2,r3,[r0,#0x3c]
000036  409c              LSLS     r4,r4,r3
000038  6054              STR      r4,[r2,#4]
;;;291    
;;;292      /* Initialize the error code */
;;;293      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
00003a  6381              STR      r1,[r0,#0x38]
;;;294    
;;;295      /* Initialize the DMA state */
;;;296      hdma->State = HAL_DMA_STATE_RESET;
00003c  f8801021          STRB     r1,[r0,#0x21]
;;;297    
;;;298      /* Release Lock */
;;;299      __HAL_UNLOCK(hdma);
000040  f8801020          STRB     r1,[r0,#0x20]
;;;300    
;;;301      return HAL_OK;
000044  2000              MOVS     r0,#0
;;;302    }
000046  bd10              POP      {r4,pc}
                  |L4.72|
000048  2001              MOVS     r0,#1                 ;248
00004a  bd10              POP      {r4,pc}
;;;303    
                          ENDP

                  |L4.76|
                          DCD      0xbffdfff8
                  |L4.80|
                          DCD      0x40020000

                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;835      */
;;;836    uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  6b80              LDR      r0,[r0,#0x38]
;;;837    {
;;;838      return hdma->ErrorCode;
;;;839    }
000002  4770              BX       lr
;;;840    
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;823      */
;;;824    HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  f8900021          LDRB     r0,[r0,#0x21]
;;;825    {
;;;826      /* Return DMA handle state */
;;;827      return hdma->State;
;;;828    }
000004  4770              BX       lr
;;;829    
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_DMA_IRQHandler PROC
;;;606      */
;;;607    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;608    {
;;;609      uint32_t flag_it = hdma->DmaBaseAddress->ISR;
000004  6bc1              LDR      r1,[r0,#0x3c]
000006  680c              LDR      r4,[r1,#0]
;;;610      uint32_t source_it = hdma->Instance->CCR;
000008  6801              LDR      r1,[r0,#0]
00000a  680b              LDR      r3,[r1,#0]
;;;611      
;;;612      /* Half Transfer Complete Interrupt management ******************************/
;;;613      if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
00000c  f8d0c040          LDR      r12,[r0,#0x40]
000010  2204              MOVS     r2,#4
000012  fa02f20c          LSL      r2,r2,r12
;;;614      {
;;;615        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;616        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
;;;617        {
;;;618          /* Disable the half transfer interrupt */
;;;619          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
;;;620        }
;;;621        /* Clear the half transfer complete flag */
;;;622        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
000016  4d49              LDR      r5,|L7.316|
000018  f8dfa124          LDR      r10,|L7.320|
00001c  4e49              LDR      r6,|L7.324|
00001e  4f4a              LDR      r7,|L7.328|
000020  f8dfb128          LDR      r11,|L7.332|
000024  f8dfe128          LDR      lr,|L7.336|
000028  4222              TST      r2,r4                 ;613
00002a  d02c              BEQ      |L7.134|
00002c  075a              LSLS     r2,r3,#29             ;613
00002e  d52a              BPL      |L7.134|
000030  680a              LDR      r2,[r1,#0]            ;616
000032  0692              LSLS     r2,r2,#26             ;616
000034  d403              BMI      |L7.62|
000036  680a              LDR      r2,[r1,#0]            ;619
000038  f0220204          BIC      r2,r2,#4              ;619
00003c  600a              STR      r2,[r1,#0]            ;619
                  |L7.62|
00003e  6801              LDR      r1,[r0,#0]
000040  42a9              CMP      r1,r5
000042  d101              BNE      |L7.72|
000044  2204              MOVS     r2,#4
000046  e019              B        |L7.124|
                  |L7.72|
000048  4551              CMP      r1,r10
00004a  d101              BNE      |L7.80|
00004c  2240              MOVS     r2,#0x40
00004e  e015              B        |L7.124|
                  |L7.80|
000050  42b1              CMP      r1,r6
000052  d102              BNE      |L7.90|
000054  f44f6280          MOV      r2,#0x400
000058  e010              B        |L7.124|
                  |L7.90|
00005a  42b9              CMP      r1,r7
00005c  d102              BNE      |L7.100|
00005e  f44f4280          MOV      r2,#0x4000
000062  e00b              B        |L7.124|
                  |L7.100|
000064  4559              CMP      r1,r11
000066  d102              BNE      |L7.110|
000068  f44f2280          MOV      r2,#0x40000
00006c  e006              B        |L7.124|
                  |L7.110|
00006e  4571              CMP      r1,lr
000070  d102              BNE      |L7.120|
000072  f44f0280          MOV      r2,#0x400000
000076  e001              B        |L7.124|
                  |L7.120|
000078  f04f6280          MOV      r2,#0x4000000
                  |L7.124|
00007c  492f              LDR      r1,|L7.316|
00007e  3908              SUBS     r1,r1,#8
000080  604a              STR      r2,[r1,#4]
;;;623    
;;;624        /* DMA peripheral state is not updated in Half Transfer */
;;;625        /* but in Transfer Complete case */
;;;626    
;;;627        if(hdma->XferHalfCpltCallback != NULL)
000082  6ac1              LDR      r1,[r0,#0x2c]
000084  e03b              B        |L7.254|
                  |L7.134|
;;;628        {
;;;629          /* Half transfer callback */
;;;630          hdma->XferHalfCpltCallback(hdma);
;;;631        }
;;;632      }
;;;633    
;;;634      /* Transfer Complete Interrupt management ***********************************/
;;;635      else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
000086  f04f0802          MOV      r8,#2
00008a  fa08f80c          LSL      r8,r8,r12
00008e  ea180f04          TST      r8,r4
000092  f04f0900          MOV      r9,#0
;;;636      {
;;;637        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
;;;638        {
;;;639          /* Disable the transfer complete and error interrupt */
;;;640          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
;;;641    
;;;642          /* Change the DMA state */
;;;643          hdma->State = HAL_DMA_STATE_READY;
000096  f04f0201          MOV      r2,#1
00009a  d035              BEQ      |L7.264|
00009c  ea5f7883          LSLS     r8,r3,#30             ;635
0000a0  d532              BPL      |L7.264|
0000a2  680b              LDR      r3,[r1,#0]            ;637
0000a4  069b              LSLS     r3,r3,#26             ;637
0000a6  d405              BMI      |L7.180|
0000a8  680b              LDR      r3,[r1,#0]            ;640
0000aa  f023030a          BIC      r3,r3,#0xa            ;640
0000ae  600b              STR      r3,[r1,#0]            ;640
0000b0  f8802021          STRB     r2,[r0,#0x21]
                  |L7.180|
;;;644        }
;;;645        /* Clear the transfer complete flag */
;;;646          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
0000b4  6801              LDR      r1,[r0,#0]
0000b6  42a9              CMP      r1,r5
0000b8  d101              BNE      |L7.190|
0000ba  2202              MOVS     r2,#2
0000bc  e019              B        |L7.242|
                  |L7.190|
0000be  4551              CMP      r1,r10
0000c0  d101              BNE      |L7.198|
0000c2  2220              MOVS     r2,#0x20
0000c4  e015              B        |L7.242|
                  |L7.198|
0000c6  42b1              CMP      r1,r6
0000c8  d102              BNE      |L7.208|
0000ca  f44f7200          MOV      r2,#0x200
0000ce  e010              B        |L7.242|
                  |L7.208|
0000d0  42b9              CMP      r1,r7
0000d2  d102              BNE      |L7.218|
0000d4  f44f5200          MOV      r2,#0x2000
0000d8  e00b              B        |L7.242|
                  |L7.218|
0000da  4559              CMP      r1,r11
0000dc  d102              BNE      |L7.228|
0000de  f44f3200          MOV      r2,#0x20000
0000e2  e006              B        |L7.242|
                  |L7.228|
0000e4  4571              CMP      r1,lr
0000e6  d102              BNE      |L7.238|
0000e8  f44f1200          MOV      r2,#0x200000
0000ec  e001              B        |L7.242|
                  |L7.238|
0000ee  f04f7200          MOV      r2,#0x2000000
                  |L7.242|
0000f2  4912              LDR      r1,|L7.316|
0000f4  3908              SUBS     r1,r1,#8
0000f6  604a              STR      r2,[r1,#4]
;;;647    
;;;648        /* Process Unlocked */
;;;649        __HAL_UNLOCK(hdma);
0000f8  f8809020          STRB     r9,[r0,#0x20]
;;;650    
;;;651        if(hdma->XferCpltCallback != NULL)
0000fc  6a81              LDR      r1,[r0,#0x28]
                  |L7.254|
0000fe  2900              CMP      r1,#0
000100  d01a              BEQ      |L7.312|
;;;652        {
;;;653          /* Transfer complete callback */
;;;654          hdma->XferCpltCallback(hdma);
;;;655        }
;;;656      }
;;;657    
;;;658      /* Transfer Error Interrupt management **************************************/
;;;659      else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
;;;660      {
;;;661        /* When a DMA transfer error occurs */
;;;662        /* A hardware clear of its EN bits is performed */
;;;663        /* Disable ALL DMA IT */
;;;664        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
;;;665    
;;;666        /* Clear all flags */
;;;667        hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
;;;668    
;;;669        /* Update error code */
;;;670        hdma->ErrorCode = HAL_DMA_ERROR_TE;
;;;671    
;;;672        /* Change the DMA state */
;;;673        hdma->State = HAL_DMA_STATE_READY;
;;;674    
;;;675        /* Process Unlocked */
;;;676        __HAL_UNLOCK(hdma);
;;;677    
;;;678        if (hdma->XferErrorCallback != NULL)
;;;679        {
;;;680          /* Transfer error callback */
;;;681          hdma->XferErrorCallback(hdma);
000102  e8bd5ff0          POP      {r4-r12,lr}
000106  4708              BX       r1
                  |L7.264|
000108  2508              MOVS     r5,#8                 ;659
00010a  fa05f50c          LSL      r5,r5,r12             ;659
00010e  4225              TST      r5,r4                 ;659
000110  d012              BEQ      |L7.312|
000112  071b              LSLS     r3,r3,#28             ;659
000114  d510              BPL      |L7.312|
000116  680b              LDR      r3,[r1,#0]            ;664
000118  f023030e          BIC      r3,r3,#0xe            ;664
00011c  600b              STR      r3,[r1,#0]            ;664
00011e  f8901040          LDRB     r1,[r0,#0x40]         ;667
000122  6bc3              LDR      r3,[r0,#0x3c]         ;667
000124  fa02f101          LSL      r1,r2,r1              ;667
000128  6059              STR      r1,[r3,#4]            ;667
00012a  6382              STR      r2,[r0,#0x38]         ;670
00012c  f8802021          STRB     r2,[r0,#0x21]         ;673
000130  f8809020          STRB     r9,[r0,#0x20]         ;676
000134  6b01              LDR      r1,[r0,#0x30]         ;678
000136  e7e2              B        |L7.254|
                  |L7.312|
;;;682        }
;;;683      }
;;;684      return;
;;;685    }
000138  e8bd9ff0          POP      {r4-r12,pc}
;;;686    
                          ENDP

                  |L7.316|
                          DCD      0x40020008
                  |L7.320|
                          DCD      0x4002001c
                  |L7.324|
                          DCD      0x40020030
                  |L7.328|
                          DCD      0x40020044
                  |L7.332|
                          DCD      0x40020058
                  |L7.336|
                          DCD      0x4002006c

                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Init PROC
;;;158      */
;;;159    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  b530              PUSH     {r4,r5,lr}
;;;160    {
000002  b348              CBZ      r0,|L8.88|
;;;161      uint32_t tmp = 0U;
;;;162    
;;;163      /* Check the DMA handle allocation */
;;;164      if(hdma == NULL)
;;;165      {
;;;166        return HAL_ERROR;
;;;167      }
;;;168    
;;;169      /* Check the parameters */
;;;170      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;171      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;172      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;173      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;174      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;175      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;176      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;177      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;178    
;;;179    #if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
;;;180      /* calculation of the channel index */
;;;181      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
;;;182      {
;;;183        /* DMA1 */
;;;184        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;185        hdma->DmaBaseAddress = DMA1;
;;;186      }
;;;187      else 
;;;188      {
;;;189        /* DMA2 */
;;;190        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;191        hdma->DmaBaseAddress = DMA2;
;;;192      }
;;;193    #else
;;;194      /* DMA1 */
;;;195      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
000004  c808              LDM      r0!,{r3}
000006  4915              LDR      r1,|L8.92|
000008  2214              MOVS     r2,#0x14
00000a  4419              ADD      r1,r1,r3
00000c  fbb1f1f2          UDIV     r1,r1,r2
000010  0089              LSLS     r1,r1,#2
;;;196      hdma->DmaBaseAddress = DMA1;
000012  63c1              STR      r1,[r0,#0x3c]
000014  4912              LDR      r1,|L8.96|
;;;197    #endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */
;;;198    
;;;199      /* Change DMA peripheral state */
;;;200      hdma->State = HAL_DMA_STATE_BUSY;
000016  6381              STR      r1,[r0,#0x38]
000018  2102              MOVS     r1,#2
00001a  7741              STRB     r1,[r0,#0x1d]
;;;201    
;;;202      /* Get the CR register value */
;;;203      tmp = hdma->Instance->CCR;
00001c  681a              LDR      r2,[r3,#0]
;;;204    
;;;205      /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;206      tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
00001e  f64371f0          MOV      r1,#0x3ff0
000022  438a              BICS     r2,r2,r1
000024  e9d01400          LDRD     r1,r4,[r0,#0]
;;;207                          DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
;;;208                          DMA_CCR_DIR));
;;;209    
;;;210      /* Prepare the DMA Channel configuration */
;;;211      tmp |=  hdma->Init.Direction        |
000028  4321              ORRS     r1,r1,r4
00002a  e9d04502          LDRD     r4,r5,[r0,#8]
00002e  432c              ORRS     r4,r4,r5
000030  4321              ORRS     r1,r1,r4
000032  6904              LDR      r4,[r0,#0x10]
000034  4321              ORRS     r1,r1,r4
000036  6944              LDR      r4,[r0,#0x14]
000038  4321              ORRS     r1,r1,r4
00003a  6984              LDR      r4,[r0,#0x18]
00003c  4321              ORRS     r1,r1,r4
00003e  4311              ORRS     r1,r1,r2
;;;212              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;213              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;214              hdma->Init.Mode                | hdma->Init.Priority;
;;;215    
;;;216      /* Write to DMA Channel CR register */
;;;217      hdma->Instance->CCR = tmp;
000040  6019              STR      r1,[r3,#0]
;;;218    
;;;219    
;;;220      /* Clean callbacks */
;;;221      hdma->XferCpltCallback = NULL;
000042  2100              MOVS     r1,#0
;;;222      hdma->XferHalfCpltCallback = NULL;
000044  6241              STR      r1,[r0,#0x24]
;;;223      hdma->XferErrorCallback = NULL;
000046  6281              STR      r1,[r0,#0x28]
;;;224      hdma->XferAbortCallback = NULL;
000048  62c1              STR      r1,[r0,#0x2c]
;;;225    
;;;226      /* Initialise the error code */
;;;227      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
00004a  6301              STR      r1,[r0,#0x30]
00004c  6341              STR      r1,[r0,#0x34]
;;;228    
;;;229      /* Initialize the DMA state*/
;;;230      hdma->State = HAL_DMA_STATE_READY;
00004e  2201              MOVS     r2,#1
000050  7742              STRB     r2,[r0,#0x1d]
;;;231      /* Allocate lock resource and initialize it */
;;;232      hdma->Lock = HAL_UNLOCKED;
000052  7701              STRB     r1,[r0,#0x1c]
;;;233      
;;;234      return HAL_OK;
000054  4608              MOV      r0,r1
;;;235    }
000056  bd30              POP      {r4,r5,pc}
                  |L8.88|
000058  2001              MOVS     r0,#1                 ;166
00005a  bd30              POP      {r4,r5,pc}
;;;236    
                          ENDP

                  |L8.92|
                          DCD      0xbffdfff8
                  |L8.96|
                          DCD      0x40020000

                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=2

                  HAL_DMA_PollForTransfer PROC
;;;505      */
;;;506    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;507    {
000004  4604              MOV      r4,r0
;;;508      uint32_t temp;
;;;509      uint32_t tickstart = 0U;
;;;510    
;;;511      if(HAL_DMA_STATE_BUSY != hdma->State)
000006  f8900021          LDRB     r0,[r0,#0x21]
00000a  b082              SUB      sp,sp,#8              ;507
00000c  f04f0b00          MOV      r11,#0
000010  2802              CMP      r0,#2
000012  d002              BEQ      |L9.26|
;;;512      {
;;;513        /* no transfer ongoing */
;;;514        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000014  2004              MOVS     r0,#4
000016  63a0              STR      r0,[r4,#0x38]
;;;515        __HAL_UNLOCK(hdma);
;;;516        return HAL_ERROR;
000018  e09d              B        |L9.342|
                  |L9.26|
;;;517      }
;;;518    
;;;519      /* Polling mode not supported in circular mode */
;;;520      if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
00001a  6820              LDR      r0,[r4,#0]
00001c  6801              LDR      r1,[r0,#0]
00001e  0689              LSLS     r1,r1,#26
000020  d503              BPL      |L9.42|
;;;521      {
;;;522        hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
000022  f44f7080          MOV      r0,#0x100
000026  63a0              STR      r0,[r4,#0x38]
;;;523        return HAL_ERROR;
000028  e097              B        |L9.346|
                  |L9.42|
;;;524      }
;;;525      
;;;526      /* Get the level transfer complete flag */
;;;527      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;528      {
;;;529        /* Transfer Complete flag */
;;;530        temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
00002a  4e78              LDR      r6,|L9.524|
00002c  9903              LDR      r1,[sp,#0xc]          ;527
00002e  3614              ADDS     r6,r6,#0x14
000030  f8df81d8          LDR      r8,|L9.524|
000034  f8df91d4          LDR      r9,|L9.524|
000038  f8dfa1d0          LDR      r10,|L9.524|
00003c  2900              CMP      r1,#0                 ;527
00003e  4d73              LDR      r5,|L9.524|
;;;531      }
;;;532      else
;;;533      {
;;;534        /* Half Transfer Complete flag */
;;;535        temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
000040  4973              LDR      r1,|L9.528|
000042  f1080828          ADD      r8,r8,#0x28           ;530
000046  f109093c          ADD      r9,r9,#0x3c           ;530
00004a  f10a0a50          ADD      r10,r10,#0x50         ;530
00004e  d003              BEQ      |L9.88|
000050  4288              CMP      r0,r1
000052  d120              BNE      |L9.150|
000054  2704              MOVS     r7,#4
000056  e038              B        |L9.202|
                  |L9.88|
000058  4288              CMP      r0,r1                 ;530
00005a  d101              BNE      |L9.96|
00005c  2702              MOVS     r7,#2                 ;530
00005e  e034              B        |L9.202|
                  |L9.96|
000060  42a8              CMP      r0,r5                 ;530
000062  d101              BNE      |L9.104|
000064  2720              MOVS     r7,#0x20              ;530
000066  e030              B        |L9.202|
                  |L9.104|
000068  42b0              CMP      r0,r6                 ;530
00006a  d102              BNE      |L9.114|
00006c  f44f7700          MOV      r7,#0x200             ;530
000070  e02b              B        |L9.202|
                  |L9.114|
000072  4540              CMP      r0,r8                 ;530
000074  d102              BNE      |L9.124|
000076  f44f5700          MOV      r7,#0x2000            ;530
00007a  e026              B        |L9.202|
                  |L9.124|
00007c  4548              CMP      r0,r9                 ;530
00007e  d102              BNE      |L9.134|
000080  f44f3700          MOV      r7,#0x20000           ;530
000084  e021              B        |L9.202|
                  |L9.134|
000086  4550              CMP      r0,r10                ;530
000088  d102              BNE      |L9.144|
00008a  f44f1700          MOV      r7,#0x200000          ;530
00008e  e01c              B        |L9.202|
                  |L9.144|
000090  f04f7700          MOV      r7,#0x2000000         ;530
000094  e019              B        |L9.202|
                  |L9.150|
000096  42a8              CMP      r0,r5
000098  d101              BNE      |L9.158|
00009a  2740              MOVS     r7,#0x40
00009c  e015              B        |L9.202|
                  |L9.158|
00009e  42b0              CMP      r0,r6
0000a0  d102              BNE      |L9.168|
0000a2  f44f6780          MOV      r7,#0x400
0000a6  e010              B        |L9.202|
                  |L9.168|
0000a8  4540              CMP      r0,r8
0000aa  d102              BNE      |L9.178|
0000ac  f44f4780          MOV      r7,#0x4000
0000b0  e00b              B        |L9.202|
                  |L9.178|
0000b2  4548              CMP      r0,r9
0000b4  d102              BNE      |L9.188|
0000b6  f44f2780          MOV      r7,#0x40000
0000ba  e006              B        |L9.202|
                  |L9.188|
0000bc  4550              CMP      r0,r10
0000be  d102              BNE      |L9.198|
0000c0  f44f0780          MOV      r7,#0x400000
0000c4  e001              B        |L9.202|
                  |L9.198|
0000c6  f04f6780          MOV      r7,#0x4000000
                  |L9.202|
;;;536      }
;;;537    
;;;538      /* Get tick */
;;;539      tickstart = HAL_GetTick();
0000ca  f7fffffe          BL       HAL_GetTick
;;;540    
;;;541      while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
0000ce  9000              STR      r0,[sp,#0]
0000d0  e047              B        |L9.354|
                  |L9.210|
;;;542      {
;;;543        if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
0000d2  6802              LDR      r2,[r0,#0]
0000d4  494e              LDR      r1,|L9.528|
0000d6  6820              LDR      r0,[r4,#0]
0000d8  4288              CMP      r0,r1
0000da  d101              BNE      |L9.224|
0000dc  2008              MOVS     r0,#8
0000de  e019              B        |L9.276|
                  |L9.224|
0000e0  42a8              CMP      r0,r5
0000e2  d101              BNE      |L9.232|
0000e4  2080              MOVS     r0,#0x80
0000e6  e015              B        |L9.276|
                  |L9.232|
0000e8  42b0              CMP      r0,r6
0000ea  d102              BNE      |L9.242|
0000ec  f44f6000          MOV      r0,#0x800
0000f0  e010              B        |L9.276|
                  |L9.242|
0000f2  4540              CMP      r0,r8
0000f4  d102              BNE      |L9.252|
0000f6  f44f4000          MOV      r0,#0x8000
0000fa  e00b              B        |L9.276|
                  |L9.252|
0000fc  4548              CMP      r0,r9
0000fe  d102              BNE      |L9.262|
000100  f44f2000          MOV      r0,#0x80000
000104  e006              B        |L9.276|
                  |L9.262|
000106  4550              CMP      r0,r10
000108  d102              BNE      |L9.272|
00010a  f44f0000          MOV      r0,#0x800000
00010e  e001              B        |L9.276|
                  |L9.272|
000110  f04f6000          MOV      r0,#0x8000000
                  |L9.276|
000114  4202              TST      r2,r0
000116  d00b              BEQ      |L9.304|
;;;544        {
;;;545          /* When a DMA transfer error occurs */
;;;546          /* A hardware clear of its EN bits is performed */
;;;547          /* Clear all flags */
;;;548          hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000118  f8941040          LDRB     r1,[r4,#0x40]
00011c  6be2              LDR      r2,[r4,#0x3c]
00011e  2001              MOVS     r0,#1
000120  fa00f101          LSL      r1,r0,r1
000124  6051              STR      r1,[r2,#4]
;;;549    
;;;550          /* Update error code */
;;;551          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
000126  6ba1              LDR      r1,[r4,#0x38]
000128  f0410101          ORR      r1,r1,#1
00012c  63a1              STR      r1,[r4,#0x38]
;;;552    
;;;553          /* Change the DMA state */
;;;554          hdma->State= HAL_DMA_STATE_READY;
;;;555    
;;;556          /* Process Unlocked */
;;;557          __HAL_UNLOCK(hdma);
;;;558    
;;;559          return HAL_ERROR;
00012e  e010              B        |L9.338|
                  |L9.304|
;;;560        }
;;;561        /* Check for the Timeout */
;;;562        if(Timeout != HAL_MAX_DELAY)
000130  9804              LDR      r0,[sp,#0x10]
000132  1c40              ADDS     r0,r0,#1
000134  d015              BEQ      |L9.354|
;;;563        {
;;;564          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
000136  9804              LDR      r0,[sp,#0x10]
000138  b130              CBZ      r0,|L9.328|
00013a  f7fffffe          BL       HAL_GetTick
00013e  9900              LDR      r1,[sp,#0]
000140  1a41              SUBS     r1,r0,r1
000142  9804              LDR      r0,[sp,#0x10]
000144  4281              CMP      r1,r0
000146  d90c              BLS      |L9.354|
                  |L9.328|
;;;565          {
;;;566            /* Update error code */
;;;567            SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
000148  6ba0              LDR      r0,[r4,#0x38]
00014a  f0400020          ORR      r0,r0,#0x20
00014e  63a0              STR      r0,[r4,#0x38]
;;;568    
;;;569            /* Change the DMA state */
;;;570            hdma->State = HAL_DMA_STATE_READY;
000150  2001              MOVS     r0,#1
                  |L9.338|
000152  f8840021          STRB     r0,[r4,#0x21]
                  |L9.342|
000156  f884b020          STRB     r11,[r4,#0x20]        ;515
                  |L9.346|
;;;571    
;;;572            /* Process Unlocked */
;;;573            __HAL_UNLOCK(hdma);
;;;574    
;;;575            return HAL_ERROR;
00015a  2001              MOVS     r0,#1
                  |L9.348|
;;;576          }
;;;577        }
;;;578      }
;;;579    
;;;580      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;581      {
;;;582        /* Clear the transfer complete flag */
;;;583        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
;;;584    
;;;585        /* The selected Channelx EN bit is cleared (DMA is disabled and
;;;586        all transfers are complete) */
;;;587        hdma->State = HAL_DMA_STATE_READY;
;;;588      }
;;;589      else
;;;590      {
;;;591        /* Clear the half transfer complete flag */
;;;592        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;593      }
;;;594      
;;;595      /* Process unlocked */
;;;596      __HAL_UNLOCK(hdma);
;;;597    
;;;598      return HAL_OK;
;;;599    }
00015c  b005              ADD      sp,sp,#0x14
00015e  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.354|
000162  482b              LDR      r0,|L9.528|
000164  3808              SUBS     r0,r0,#8              ;541
000166  6801              LDR      r1,[r0,#0]            ;541
000168  4239              TST      r1,r7                 ;541
00016a  d0b2              BEQ      |L9.210|
00016c  9803              LDR      r0,[sp,#0xc]          ;580
00016e  4928              LDR      r1,|L9.528|
000170  2800              CMP      r0,#0                 ;580
000172  6820              LDR      r0,[r4,#0]            ;580
000174  d003              BEQ      |L9.382|
000176  4288              CMP      r0,r1                 ;592
000178  d126              BNE      |L9.456|
00017a  2004              MOVS     r0,#4                 ;592
00017c  e03e              B        |L9.508|
                  |L9.382|
00017e  4288              CMP      r0,r1                 ;583
000180  d101              BNE      |L9.390|
000182  2002              MOVS     r0,#2                 ;583
000184  e019              B        |L9.442|
                  |L9.390|
000186  42a8              CMP      r0,r5                 ;583
000188  d101              BNE      |L9.398|
00018a  2020              MOVS     r0,#0x20              ;583
00018c  e015              B        |L9.442|
                  |L9.398|
00018e  42b0              CMP      r0,r6                 ;583
000190  d102              BNE      |L9.408|
000192  f44f7000          MOV      r0,#0x200             ;583
000196  e010              B        |L9.442|
                  |L9.408|
000198  4540              CMP      r0,r8                 ;583
00019a  d102              BNE      |L9.418|
00019c  f44f5000          MOV      r0,#0x2000            ;583
0001a0  e00b              B        |L9.442|
                  |L9.418|
0001a2  4548              CMP      r0,r9                 ;583
0001a4  d102              BNE      |L9.428|
0001a6  f44f3000          MOV      r0,#0x20000           ;583
0001aa  e006              B        |L9.442|
                  |L9.428|
0001ac  4550              CMP      r0,r10                ;583
0001ae  d102              BNE      |L9.438|
0001b0  f44f1000          MOV      r0,#0x200000          ;583
0001b4  e001              B        |L9.442|
                  |L9.438|
0001b6  f04f7000          MOV      r0,#0x2000000         ;583
                  |L9.442|
0001ba  4915              LDR      r1,|L9.528|
0001bc  3908              SUBS     r1,r1,#8              ;583
0001be  6048              STR      r0,[r1,#4]            ;583
0001c0  2001              MOVS     r0,#1                 ;587
0001c2  f8840021          STRB     r0,[r4,#0x21]         ;587
0001c6  e01c              B        |L9.514|
                  |L9.456|
0001c8  42a8              CMP      r0,r5                 ;592
0001ca  d101              BNE      |L9.464|
0001cc  2040              MOVS     r0,#0x40              ;592
0001ce  e015              B        |L9.508|
                  |L9.464|
0001d0  42b0              CMP      r0,r6                 ;592
0001d2  d102              BNE      |L9.474|
0001d4  f44f6080          MOV      r0,#0x400             ;592
0001d8  e010              B        |L9.508|
                  |L9.474|
0001da  4540              CMP      r0,r8                 ;592
0001dc  d102              BNE      |L9.484|
0001de  f44f4080          MOV      r0,#0x4000            ;592
0001e2  e00b              B        |L9.508|
                  |L9.484|
0001e4  4548              CMP      r0,r9                 ;592
0001e6  d102              BNE      |L9.494|
0001e8  f44f2080          MOV      r0,#0x40000           ;592
0001ec  e006              B        |L9.508|
                  |L9.494|
0001ee  4550              CMP      r0,r10                ;592
0001f0  d102              BNE      |L9.504|
0001f2  f44f0080          MOV      r0,#0x400000          ;592
0001f6  e001              B        |L9.508|
                  |L9.504|
0001f8  f04f6080          MOV      r0,#0x4000000         ;592
                  |L9.508|
0001fc  4904              LDR      r1,|L9.528|
0001fe  3908              SUBS     r1,r1,#8              ;592
000200  6048              STR      r0,[r1,#4]            ;592
                  |L9.514|
000202  f884b020          STRB     r11,[r4,#0x20]        ;596
000206  2000              MOVS     r0,#0                 ;598
000208  e7a8              B        |L9.348|
;;;600    
                          ENDP

00020a  0000              DCW      0x0000
                  |L9.524|
                          DCD      0x4002001c
                  |L9.528|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_RegisterCallback PROC
;;;696      */                          
;;;697    HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
000000  b510              PUSH     {r4,lr}
;;;698    {
;;;699      HAL_StatusTypeDef status = HAL_OK;
;;;700      
;;;701      /* Process locked */
;;;702      __HAL_LOCK(hdma);
000002  f8904020          LDRB     r4,[r0,#0x20]
000006  2300              MOVS     r3,#0                 ;699
000008  2c01              CMP      r4,#1
00000a  d007              BEQ      |L10.28|
00000c  2401              MOVS     r4,#1
00000e  f8804020          STRB     r4,[r0,#0x20]
;;;703      
;;;704      if(HAL_DMA_STATE_READY == hdma->State)
000012  f8904021          LDRB     r4,[r0,#0x21]
000016  2c01              CMP      r4,#1
000018  d002              BEQ      |L10.32|
00001a  e008              B        |L10.46|
                  |L10.28|
00001c  2002              MOVS     r0,#2                 ;702
;;;705      {
;;;706        switch (CallbackID)
;;;707        {
;;;708        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;709          hdma->XferCpltCallback = pCallback;
;;;710          break;
;;;711          
;;;712        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;713          hdma->XferHalfCpltCallback = pCallback;
;;;714          break;         
;;;715    
;;;716        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;717          hdma->XferErrorCallback = pCallback;
;;;718          break;         
;;;719          
;;;720        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;721          hdma->XferAbortCallback = pCallback;
;;;722          break; 
;;;723          
;;;724        default:
;;;725          status = HAL_ERROR;
;;;726          break;                                                            
;;;727        }
;;;728      }
;;;729      else
;;;730      {
;;;731        status = HAL_ERROR;
;;;732      } 
;;;733      
;;;734      /* Release Lock */
;;;735      __HAL_UNLOCK(hdma);
;;;736      
;;;737      return status;
;;;738    }
00001e  bd10              POP      {r4,pc}
                  |L10.32|
000020  b159              CBZ      r1,|L10.58|
000022  2901              CMP      r1,#1                 ;706
000024  d00b              BEQ      |L10.62|
000026  2902              CMP      r1,#2                 ;706
000028  d00b              BEQ      |L10.66|
00002a  2903              CMP      r1,#3                 ;706
00002c  d00b              BEQ      |L10.70|
                  |L10.46|
00002e  2301              MOVS     r3,#1                 ;725
                  |L10.48|
000030  2100              MOVS     r1,#0                 ;735
000032  f8801020          STRB     r1,[r0,#0x20]         ;735
000036  4618              MOV      r0,r3                 ;737
000038  bd10              POP      {r4,pc}
                  |L10.58|
00003a  6282              STR      r2,[r0,#0x28]         ;710
00003c  e7f8              B        |L10.48|
                  |L10.62|
00003e  62c2              STR      r2,[r0,#0x2c]         ;714
000040  e7f6              B        |L10.48|
                  |L10.66|
000042  6302              STR      r2,[r0,#0x30]         ;718
000044  e7f4              B        |L10.48|
                  |L10.70|
000046  6342              STR      r2,[r0,#0x34]         ;722
000048  e7f2              B        |L10.48|
;;;739    
                          ENDP


                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start PROC
;;;335      */
;;;336    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;337    {
000002  4604              MOV      r4,r0
;;;338      HAL_StatusTypeDef status = HAL_OK;
;;;339    
;;;340      /* Check the parameters */
;;;341      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;342    
;;;343      /* Process locked */
;;;344      __HAL_LOCK(hdma);
000004  f8900020          LDRB     r0,[r0,#0x20]
000008  2500              MOVS     r5,#0                 ;338
00000a  2801              CMP      r0,#1
00000c  d00c              BEQ      |L11.40|
00000e  2001              MOVS     r0,#1
000010  f8840020          STRB     r0,[r4,#0x20]
;;;345    
;;;346      if(HAL_DMA_STATE_READY == hdma->State)
000014  f8946021          LDRB     r6,[r4,#0x21]
000018  2000              MOVS     r0,#0
00001a  2e01              CMP      r6,#1
00001c  d006              BEQ      |L11.44|
;;;347      {
;;;348        /* Change DMA peripheral state */
;;;349        hdma->State = HAL_DMA_STATE_BUSY;
;;;350        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;351                
;;;352        /* Disable the peripheral */
;;;353        __HAL_DMA_DISABLE(hdma);
;;;354        
;;;355        /* Configure the source, destination address and the data length & clear flags*/
;;;356        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;357        
;;;358        /* Enable the Peripheral */
;;;359        __HAL_DMA_ENABLE(hdma);
;;;360      }
;;;361      else
;;;362      {
;;;363       /* Process Unlocked */
;;;364       __HAL_UNLOCK(hdma);  
00001e  f8840020          STRB     r0,[r4,#0x20]
;;;365       status = HAL_BUSY;
000022  2502              MOVS     r5,#2
                  |L11.36|
;;;366      }  
;;;367      return status;
000024  4628              MOV      r0,r5
;;;368    }
000026  bd70              POP      {r4-r6,pc}
                  |L11.40|
000028  2002              MOVS     r0,#2                 ;344
00002a  bd70              POP      {r4-r6,pc}
                  |L11.44|
00002c  2602              MOVS     r6,#2                 ;349
00002e  f8846021          STRB     r6,[r4,#0x21]         ;349
000032  63a0              STR      r0,[r4,#0x38]         ;350
000034  6820              LDR      r0,[r4,#0]            ;353
000036  6806              LDR      r6,[r0,#0]            ;353
000038  f0260601          BIC      r6,r6,#1              ;353
00003c  6006              STR      r6,[r0,#0]            ;353
00003e  4620              MOV      r0,r4                 ;356
000040  f7fffffe          BL       DMA_SetConfig
000044  6820              LDR      r0,[r4,#0]            ;359
000046  6801              LDR      r1,[r0,#0]            ;359
000048  f0410101          ORR      r1,r1,#1              ;359
00004c  6001              STR      r1,[r0,#0]            ;359
00004e  e7e9              B        |L11.36|
;;;369    
                          ENDP


                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start_IT PROC
;;;378      */
;;;379    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;380    {
000002  4604              MOV      r4,r0
;;;381      HAL_StatusTypeDef status = HAL_OK;
;;;382    
;;;383      /* Check the parameters */
;;;384      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;385    
;;;386      /* Process locked */
;;;387      __HAL_LOCK(hdma);
000004  f8900020          LDRB     r0,[r0,#0x20]
000008  2500              MOVS     r5,#0                 ;381
00000a  2801              CMP      r0,#1
00000c  d00c              BEQ      |L12.40|
00000e  2001              MOVS     r0,#1
000010  f8840020          STRB     r0,[r4,#0x20]
;;;388      
;;;389      if(HAL_DMA_STATE_READY == hdma->State)
000014  f8946021          LDRB     r6,[r4,#0x21]
000018  2000              MOVS     r0,#0
00001a  2e01              CMP      r6,#1
00001c  d006              BEQ      |L12.44|
;;;390      {
;;;391        /* Change DMA peripheral state */
;;;392        hdma->State = HAL_DMA_STATE_BUSY;
;;;393        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;394        
;;;395        /* Disable the peripheral */
;;;396        __HAL_DMA_DISABLE(hdma);
;;;397        
;;;398        /* Configure the source, destination address and the data length & clear flags*/
;;;399        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;400        
;;;401        /* Enable the transfer complete interrupt */
;;;402        /* Enable the transfer Error interrupt */
;;;403        if(NULL != hdma->XferHalfCpltCallback)
;;;404        {
;;;405          /* Enable the Half transfer complete interrupt as well */
;;;406          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
;;;407        }
;;;408        else
;;;409        {
;;;410          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
;;;411          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
;;;412        }
;;;413        /* Enable the Peripheral */
;;;414        __HAL_DMA_ENABLE(hdma);
;;;415      }
;;;416      else
;;;417      {      
;;;418        /* Process Unlocked */
;;;419        __HAL_UNLOCK(hdma); 
00001e  f8840020          STRB     r0,[r4,#0x20]
;;;420    
;;;421        /* Remain BUSY */
;;;422        status = HAL_BUSY;
000022  2502              MOVS     r5,#2
                  |L12.36|
;;;423      }    
;;;424      return status;
000024  4628              MOV      r0,r5
;;;425    }
000026  bd70              POP      {r4-r6,pc}
                  |L12.40|
000028  2002              MOVS     r0,#2                 ;387
00002a  bd70              POP      {r4-r6,pc}
                  |L12.44|
00002c  2602              MOVS     r6,#2                 ;392
00002e  f8846021          STRB     r6,[r4,#0x21]         ;392
000032  63a0              STR      r0,[r4,#0x38]         ;393
000034  6820              LDR      r0,[r4,#0]            ;396
000036  6806              LDR      r6,[r0,#0]            ;396
000038  f0260601          BIC      r6,r6,#1              ;396
00003c  6006              STR      r6,[r0,#0]            ;396
00003e  4620              MOV      r0,r4                 ;399
000040  f7fffffe          BL       DMA_SetConfig
000044  6ae0              LDR      r0,[r4,#0x2c]         ;403
000046  2800              CMP      r0,#0                 ;403
000048  6820              LDR      r0,[r4,#0]            ;410
00004a  6801              LDR      r1,[r0,#0]            ;410
00004c  d002              BEQ      |L12.84|
00004e  f041010e          ORR      r1,r1,#0xe            ;406
000052  e006              B        |L12.98|
                  |L12.84|
000054  f0210104          BIC      r1,r1,#4              ;410
000058  6001              STR      r1,[r0,#0]            ;410
00005a  6820              LDR      r0,[r4,#0]            ;411
00005c  6801              LDR      r1,[r0,#0]            ;411
00005e  f041010a          ORR      r1,r1,#0xa            ;411
                  |L12.98|
000062  6001              STR      r1,[r0,#0]            ;411
000064  6820              LDR      r0,[r4,#0]            ;414
000066  6801              LDR      r1,[r0,#0]            ;414
000068  f0410101          ORR      r1,r1,#1              ;414
00006c  6001              STR      r1,[r0,#0]            ;414
00006e  e7d9              B        |L12.36|
;;;426    
                          ENDP


                          AREA ||i.HAL_DMA_UnRegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_UnRegisterCallback PROC
;;;747      */              
;;;748    HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
000000  b510              PUSH     {r4,lr}
;;;749    {
;;;750      HAL_StatusTypeDef status = HAL_OK;
;;;751    
;;;752      /* Process locked */
;;;753      __HAL_LOCK(hdma);
000002  f8902020          LDRB     r2,[r0,#0x20]
000006  2300              MOVS     r3,#0                 ;750
000008  2a01              CMP      r2,#1
00000a  d008              BEQ      |L13.30|
00000c  2201              MOVS     r2,#1
00000e  f8802020          STRB     r2,[r0,#0x20]
;;;754      
;;;755      if(HAL_DMA_STATE_READY == hdma->State)
000012  f8904021          LDRB     r4,[r0,#0x21]
000016  2200              MOVS     r2,#0
000018  2c01              CMP      r4,#1
00001a  d002              BEQ      |L13.34|
00001c  e014              B        |L13.72|
                  |L13.30|
00001e  2002              MOVS     r0,#2                 ;753
;;;756      {
;;;757        switch (CallbackID)
;;;758        {
;;;759        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;760          hdma->XferCpltCallback = NULL;
;;;761          break;
;;;762    
;;;763        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;764          hdma->XferHalfCpltCallback = NULL;
;;;765          break;         
;;;766    
;;;767        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;768          hdma->XferErrorCallback = NULL;
;;;769          break;         
;;;770    
;;;771        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;772          hdma->XferAbortCallback = NULL;
;;;773          break; 
;;;774    
;;;775        case   HAL_DMA_XFER_ALL_CB_ID:
;;;776          hdma->XferCpltCallback = NULL;
;;;777          hdma->XferHalfCpltCallback = NULL;
;;;778          hdma->XferErrorCallback = NULL;
;;;779          hdma->XferAbortCallback = NULL;
;;;780          break; 
;;;781    
;;;782        default:
;;;783          status = HAL_ERROR;
;;;784          break;
;;;785        }
;;;786      }
;;;787      else
;;;788      {
;;;789        status = HAL_ERROR;
;;;790      } 
;;;791      
;;;792      /* Release Lock */
;;;793      __HAL_UNLOCK(hdma);
;;;794      
;;;795      return status;
;;;796    }
000020  bd10              POP      {r4,pc}
                  |L13.34|
000022  2905              CMP      r1,#5                 ;757
000024  d210              BCS      |L13.72|
000026  e8dff001          TBB      [pc,r1]               ;757
00002a  0305              DCB      0x03,0x05
00002c  07090b00          DCB      0x07,0x09,0x0b,0x00
000030  6282              STR      r2,[r0,#0x28]         ;761
000032  e00a              B        |L13.74|
000034  62c2              STR      r2,[r0,#0x2c]         ;765
000036  e008              B        |L13.74|
000038  6302              STR      r2,[r0,#0x30]         ;769
00003a  e006              B        |L13.74|
                  |L13.60|
00003c  6342              STR      r2,[r0,#0x34]         ;773
00003e  e004              B        |L13.74|
000040  6282              STR      r2,[r0,#0x28]         ;777
000042  62c2              STR      r2,[r0,#0x2c]         ;778
000044  6302              STR      r2,[r0,#0x30]         ;780
000046  e7f9              B        |L13.60|
                  |L13.72|
000048  2301              MOVS     r3,#1                 ;783
                  |L13.74|
00004a  f8802020          STRB     r2,[r0,#0x20]         ;793
00004e  4618              MOV      r0,r3                 ;795
000050  bd10              POP      {r4,pc}
;;;797      
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX|
#line 587
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
