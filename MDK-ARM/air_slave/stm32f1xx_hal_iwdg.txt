; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f1xx_hal_iwdg.o --asm_dir=.\air_slave\ --list_dir=.\air_slave\ --depend=.\stm32f1xx_hal_iwdg.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_air_slave -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\stm32f1xx_hal_iwdg.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_iwdg.c]
                          THUMB

                          AREA ||i.HAL_IWDG_Init||, CODE, READONLY, ALIGN=2

                  HAL_IWDG_Init PROC
;;;161      */
;;;162    HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
000000  b570              PUSH     {r4-r6,lr}
;;;163    {
000002  0004              MOVS     r4,r0
000004  d011              BEQ      |L1.42|
;;;164      uint32_t tickstart;
;;;165    
;;;166      /* Check the IWDG handle allocation */
;;;167      if (hiwdg == NULL)
;;;168      {
;;;169        return HAL_ERROR;
;;;170      }
;;;171    
;;;172      /* Check the parameters */
;;;173      assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
;;;174      assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
;;;175      assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
;;;176    
;;;177      /* Enable IWDG. LSI is turned on automaticaly */
;;;178      __HAL_IWDG_START(hiwdg);
000006  6821              LDR      r1,[r4,#0]
000008  f64c40cc          MOV      r0,#0xcccc
00000c  6008              STR      r0,[r1,#0]
;;;179    
;;;180      /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
;;;181      IWDG_ENABLE_WRITE_ACCESS(hiwdg);
00000e  6821              LDR      r1,[r4,#0]
000010  f2455055          MOV      r0,#0x5555
000014  6008              STR      r0,[r1,#0]
000016  e9d40100          LDRD     r0,r1,[r4,#0]
;;;182    
;;;183      /* Write to IWDG registers the Prescaler & Reload values to work with */
;;;184      hiwdg->Instance->PR = hiwdg->Init.Prescaler;
00001a  6041              STR      r1,[r0,#4]
;;;185      hiwdg->Instance->RLR = hiwdg->Init.Reload;
00001c  6821              LDR      r1,[r4,#0]
00001e  68a0              LDR      r0,[r4,#8]
000020  6088              STR      r0,[r1,#8]
;;;186    
;;;187      /* Check pending flag, if previous update not done, return timeout */
;;;188      tickstart = HAL_GetTick();
000022  f7fffffe          BL       HAL_GetTick
000026  4605              MOV      r5,r0
;;;189    
;;;190      /* Wait for register to be updated */
;;;191      while (hiwdg->Instance->SR != RESET)
000028  e009              B        |L1.62|
                  |L1.42|
00002a  2001              MOVS     r0,#1                 ;169
;;;192      {
;;;193        if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
;;;194        {
;;;195          return HAL_TIMEOUT;
;;;196        }
;;;197      }
;;;198    
;;;199      /* Reload IWDG counter with value defined in the reload register */
;;;200      __HAL_IWDG_RELOAD_COUNTER(hiwdg);
;;;201    
;;;202      /* Return function status */
;;;203      return HAL_OK;
;;;204    }
00002c  bd70              POP      {r4-r6,pc}
00002e  bf00              NOP                            ;193
                  |L1.48|
000030  f7fffffe          BL       HAL_GetTick
000034  1b40              SUBS     r0,r0,r5              ;193
000036  2830              CMP      r0,#0x30              ;193
000038  d901              BLS      |L1.62|
00003a  2003              MOVS     r0,#3                 ;195
00003c  bd70              POP      {r4-r6,pc}
                  |L1.62|
00003e  6820              LDR      r0,[r4,#0]            ;191
000040  68c0              LDR      r0,[r0,#0xc]          ;191
000042  2800              CMP      r0,#0                 ;191
000044  d1f4              BNE      |L1.48|
000046  6821              LDR      r1,[r4,#0]            ;200
000048  f64a20aa          MOV      r0,#0xaaaa            ;200
00004c  6008              STR      r0,[r1,#0]            ;200
00004e  2000              MOVS     r0,#0                 ;203
000050  bd70              POP      {r4-r6,pc}
;;;205    
                          ENDP


                          AREA ||i.HAL_IWDG_Refresh||, CODE, READONLY, ALIGN=1

                  HAL_IWDG_Refresh PROC
;;;229      */
;;;230    HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
000000  6800              LDR      r0,[r0,#0]
;;;231    {
;;;232      /* Reload IWDG counter with value defined in the reload register */
;;;233      __HAL_IWDG_RELOAD_COUNTER(hiwdg);
000002  f64a21aa          MOV      r1,#0xaaaa
000006  6001              STR      r1,[r0,#0]
;;;234    
;;;235      /* Return function status */
;;;236      return HAL_OK;
000008  2000              MOVS     r0,#0
;;;237    }
00000a  4770              BX       lr
;;;238    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_iwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____REVSH|
#line 402
|__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____RRX|
#line 587
|__asm___20_stm32f1xx_hal_iwdg_c_a5fb4147____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
