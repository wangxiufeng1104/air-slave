; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f1xx_hal_flash_ex.o --asm_dir=.\air_slave\ --list_dir=.\air_slave\ --depend=.\stm32f1xx_hal_flash_ex.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_air_slave -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\stm32f1xx_hal_flash_ex.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c]
                          THUMB

                          AREA ||i.FLASH_MassErase||, CODE, READONLY, ALIGN=2

                  FLASH_MassErase PROC
;;;610      */
;;;611    static void FLASH_MassErase(uint32_t Banks)
000000  4906              LDR      r1,|L1.28|
;;;612    {
;;;613      /* Check the parameters */
;;;614      assert_param(IS_FLASH_BANK(Banks));
;;;615    
;;;616      /* Clean the error context */
;;;617      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  2000              MOVS     r0,#0
000004  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;618    
;;;619    #if defined(FLASH_BANK2_END)
;;;620      if(Banks == FLASH_BANK_BOTH)
;;;621      {
;;;622        /* bank1 & bank2 will be erased*/
;;;623        SET_BIT(FLASH->CR, FLASH_CR_MER);
;;;624        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;625        SET_BIT(FLASH->CR, FLASH_CR_STRT);
;;;626        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;627      }
;;;628      else if(Banks == FLASH_BANK_2)
;;;629      {
;;;630        /*Only bank2 will be erased*/
;;;631        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;632        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;633      }
;;;634      else
;;;635      {
;;;636    #endif /* FLASH_BANK2_END */
;;;637    #if !defined(FLASH_BANK2_END)
;;;638      /* Prevent unused argument(s) compilation warning */
;;;639      UNUSED(Banks);
;;;640    #endif /* FLASH_BANK2_END */  
;;;641        /* Only bank1 will be erased*/
;;;642        SET_BIT(FLASH->CR, FLASH_CR_MER);
000006  4806              LDR      r0,|L1.32|
000008  6901              LDR      r1,[r0,#0x10]
00000a  f0410104          ORR      r1,r1,#4
00000e  6101              STR      r1,[r0,#0x10]
;;;643        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000010  6901              LDR      r1,[r0,#0x10]
000012  f0410140          ORR      r1,r1,#0x40
000016  6101              STR      r1,[r0,#0x10]
;;;644    #if defined(FLASH_BANK2_END)
;;;645      }
;;;646    #endif /* FLASH_BANK2_END */
;;;647    }
000018  4770              BX       lr
;;;648    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      pFlash
                  |L1.32|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_DisableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_DisableWRP PROC
;;;782      */
;;;783    static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;784    {
000004  f8df809c          LDR      r8,|L2.164|
000008  f8d81020          LDR      r1,[r8,#0x20]
;;;785      HAL_StatusTypeDef status = HAL_OK;
;;;786      uint16_t WRP0_Data = 0xFFFF;
;;;787    #if defined(FLASH_WRP1_WRP1)
;;;788      uint16_t WRP1_Data = 0xFFFF;
;;;789    #endif /* FLASH_WRP1_WRP1 */
;;;790    #if defined(FLASH_WRP2_WRP2)
;;;791      uint16_t WRP2_Data = 0xFFFF;
;;;792    #endif /* FLASH_WRP2_WRP2 */
;;;793    #if defined(FLASH_WRP3_WRP3)
;;;794      uint16_t WRP3_Data = 0xFFFF;
;;;795    #endif /* FLASH_WRP3_WRP3 */
;;;796      
;;;797      /* Check the parameters */
;;;798      assert_param(IS_OB_WRP(WriteProtectPage));
;;;799    
;;;800      /* Get current write protected pages and the new pages to be unprotected ******/
;;;801      WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
;;;802    
;;;803    #if defined(OB_WRP_PAGES0TO15MASK)
;;;804      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;805    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;806      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
;;;807    #endif /* OB_WRP_PAGES0TO31MASK */
;;;808      
;;;809    #if defined(OB_WRP_PAGES16TO31MASK)
;;;810      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
;;;811    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;812      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
;;;813    #endif /* OB_WRP_PAGES32TO63MASK */
;;;814     
;;;815    #if defined(OB_WRP_PAGES64TO95MASK)
;;;816      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
;;;817    #endif /* OB_WRP_PAGES64TO95MASK */
;;;818    #if defined(OB_WRP_PAGES32TO47MASK)
;;;819      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
;;;820    #endif /* OB_WRP_PAGES32TO47MASK */
;;;821    
;;;822    #if defined(OB_WRP_PAGES96TO127MASK)
;;;823      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
;;;824    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;825      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
;;;826    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;827      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24U); 
;;;828    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;829      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
;;;830    #endif /* OB_WRP_PAGES96TO127MASK */
;;;831    
;;;832        
;;;833      /* Wait for last operation to be completed */
;;;834      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00000c  f24c3950          MOV      r9,#0xc350
000010  4301              ORRS     r1,r1,r0              ;801
000012  b2cf              UXTB     r7,r1                 ;806
000014  f3c12607          UBFX     r6,r1,#8,#8           ;812
000018  f3c14507          UBFX     r5,r1,#16,#8          ;816
00001c  0e0c              LSRS     r4,r1,#24             ;823
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       FLASH_WaitForLastOperation
;;;835    
;;;836      if(status == HAL_OK)
000024  2800              CMP      r0,#0
000026  d13b              BNE      |L2.160|
;;;837      { 
;;;838        /* Clean the error context */
;;;839        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000028  491f              LDR      r1,|L2.168|
00002a  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;840    
;;;841        /* To be able to write again option byte, need to perform a option byte erase */
;;;842        status = HAL_FLASHEx_OBErase();
00002c  f7fffffe          BL       HAL_FLASHEx_OBErase
;;;843        if (status == HAL_OK)  
000030  2800              CMP      r0,#0
000032  d135              BNE      |L2.160|
;;;844        {
;;;845          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000034  f8d82010          LDR      r2,[r8,#0x10]
000038  f0420210          ORR      r2,r2,#0x10
00003c  f8c82010          STR      r2,[r8,#0x10]
;;;846    
;;;847    #if defined(FLASH_WRP0_WRP0)
;;;848          if(WRP0_Data != 0xFFU)
000040  2fff              CMP      r7,#0xff
000042  d007              BEQ      |L2.84|
;;;849          {
;;;850            OB->WRP0 |= WRP0_Data;
000044  4819              LDR      r0,|L2.172|
000046  8801              LDRH     r1,[r0,#0]
000048  4339              ORRS     r1,r1,r7
00004a  8001              STRH     r1,[r0,#0]
;;;851            
;;;852            /* Wait for last operation to be completed */
;;;853            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00004c  4648              MOV      r0,r9
00004e  f7fffffe          BL       FLASH_WaitForLastOperation
000052  b9f8              CBNZ     r0,|L2.148|
                  |L2.84|
;;;854          }
;;;855    #endif /* FLASH_WRP0_WRP0 */
;;;856    
;;;857    #if defined(FLASH_WRP1_WRP1)
;;;858          if((status == HAL_OK) && (WRP1_Data != 0xFFU))
000054  2eff              CMP      r6,#0xff
000056  d008              BEQ      |L2.106|
;;;859          {
;;;860            OB->WRP1 |= WRP1_Data;
000058  4814              LDR      r0,|L2.172|
00005a  1c80              ADDS     r0,r0,#2
00005c  8801              LDRH     r1,[r0,#0]
00005e  4331              ORRS     r1,r1,r6
000060  8001              STRH     r1,[r0,#0]
;;;861            
;;;862            /* Wait for last operation to be completed */
;;;863            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000062  4648              MOV      r0,r9
000064  f7fffffe          BL       FLASH_WaitForLastOperation
000068  b9a0              CBNZ     r0,|L2.148|
                  |L2.106|
;;;864          }
;;;865    #endif /* FLASH_WRP1_WRP1 */
;;;866    
;;;867    #if defined(FLASH_WRP2_WRP2)
;;;868          if((status == HAL_OK) && (WRP2_Data != 0xFFU))
00006a  2dff              CMP      r5,#0xff
00006c  d008              BEQ      |L2.128|
;;;869          {
;;;870            OB->WRP2 |= WRP2_Data;
00006e  480f              LDR      r0,|L2.172|
000070  1d00              ADDS     r0,r0,#4
000072  8801              LDRH     r1,[r0,#0]
000074  4329              ORRS     r1,r1,r5
000076  8001              STRH     r1,[r0,#0]
;;;871            
;;;872            /* Wait for last operation to be completed */
;;;873            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000078  4648              MOV      r0,r9
00007a  f7fffffe          BL       FLASH_WaitForLastOperation
00007e  b948              CBNZ     r0,|L2.148|
                  |L2.128|
;;;874          }
;;;875    #endif /* FLASH_WRP2_WRP2 */
;;;876    
;;;877    #if defined(FLASH_WRP3_WRP3)
;;;878          if((status == HAL_OK) && (WRP3_Data != 0xFFU))
000080  2cff              CMP      r4,#0xff
000082  d007              BEQ      |L2.148|
;;;879          {
;;;880            OB->WRP3 |= WRP3_Data;
000084  4809              LDR      r0,|L2.172|
000086  1d80              ADDS     r0,r0,#6
000088  8801              LDRH     r1,[r0,#0]
00008a  4321              ORRS     r1,r1,r4
00008c  8001              STRH     r1,[r0,#0]
;;;881            
;;;882            /* Wait for last operation to be completed */
;;;883            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00008e  4648              MOV      r0,r9
000090  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L2.148|
;;;884          }
;;;885    #endif /* FLASH_WRP3_WRP3 */
;;;886    
;;;887          /* if the program operation is completed, disable the OPTPG Bit */
;;;888          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000094  f8d82010          LDR      r2,[r8,#0x10]
000098  f0220210          BIC      r2,r2,#0x10
00009c  f8c82010          STR      r2,[r8,#0x10]
                  |L2.160|
;;;889        }
;;;890      }
;;;891      return status;
;;;892    }
0000a0  e8bd87f0          POP      {r4-r10,pc}
;;;893    
                          ENDP

                  |L2.164|
                          DCD      0x40022000
                  |L2.168|
                          DCD      pFlash
                  |L2.172|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_EnableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_EnableWRP PROC
;;;659      */
;;;660    static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;661    {
000004  f8df809c          LDR      r8,|L3.164|
000008  f8d81020          LDR      r1,[r8,#0x20]
;;;662      HAL_StatusTypeDef status = HAL_OK;
;;;663      uint16_t WRP0_Data = 0xFFFF;
;;;664    #if defined(FLASH_WRP1_WRP1)
;;;665      uint16_t WRP1_Data = 0xFFFF;
;;;666    #endif /* FLASH_WRP1_WRP1 */
;;;667    #if defined(FLASH_WRP2_WRP2)
;;;668      uint16_t WRP2_Data = 0xFFFF;
;;;669    #endif /* FLASH_WRP2_WRP2 */
;;;670    #if defined(FLASH_WRP3_WRP3)
;;;671      uint16_t WRP3_Data = 0xFFFF;
;;;672    #endif /* FLASH_WRP3_WRP3 */
;;;673      
;;;674      /* Check the parameters */
;;;675      assert_param(IS_OB_WRP(WriteProtectPage));
;;;676        
;;;677      /* Get current write protected pages and the new pages to be protected ******/
;;;678      WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
;;;679      
;;;680    #if defined(OB_WRP_PAGES0TO15MASK)
;;;681      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;682    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;683      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
;;;684    #endif /* OB_WRP_PAGES0TO31MASK */
;;;685      
;;;686    #if defined(OB_WRP_PAGES16TO31MASK)
;;;687      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
;;;688    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;689      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
;;;690    #endif /* OB_WRP_PAGES32TO63MASK */
;;;691     
;;;692    #if defined(OB_WRP_PAGES64TO95MASK)
;;;693      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
;;;694    #endif /* OB_WRP_PAGES64TO95MASK */
;;;695    #if defined(OB_WRP_PAGES32TO47MASK)
;;;696      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
;;;697    #endif /* OB_WRP_PAGES32TO47MASK */
;;;698    
;;;699    #if defined(OB_WRP_PAGES96TO127MASK)
;;;700      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
;;;701    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;702      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
;;;703    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;704      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24U); 
;;;705    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;706      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
;;;707    #endif /* OB_WRP_PAGES96TO127MASK */
;;;708      
;;;709      /* Wait for last operation to be completed */
;;;710      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00000c  f24c3950          MOV      r9,#0xc350
000010  4381              BICS     r1,r1,r0              ;678
000012  b2cf              UXTB     r7,r1                 ;683
000014  f3c12607          UBFX     r6,r1,#8,#8           ;689
000018  f3c14507          UBFX     r5,r1,#16,#8          ;693
00001c  0e0c              LSRS     r4,r1,#24             ;700
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       FLASH_WaitForLastOperation
;;;711    
;;;712      if(status == HAL_OK)
000024  2800              CMP      r0,#0
000026  d13b              BNE      |L3.160|
;;;713      { 
;;;714        /* Clean the error context */
;;;715        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000028  491f              LDR      r1,|L3.168|
00002a  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;716    
;;;717        /* To be able to write again option byte, need to perform a option byte erase */
;;;718        status = HAL_FLASHEx_OBErase();
00002c  f7fffffe          BL       HAL_FLASHEx_OBErase
;;;719        if (status == HAL_OK)  
000030  2800              CMP      r0,#0
000032  d135              BNE      |L3.160|
;;;720        {
;;;721          /* Enable write protection */
;;;722          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000034  f8d82010          LDR      r2,[r8,#0x10]
000038  f0420210          ORR      r2,r2,#0x10
00003c  f8c82010          STR      r2,[r8,#0x10]
;;;723    
;;;724    #if defined(FLASH_WRP0_WRP0)
;;;725          if(WRP0_Data != 0xFFU)
000040  2fff              CMP      r7,#0xff
000042  d007              BEQ      |L3.84|
;;;726          {
;;;727            OB->WRP0 &= WRP0_Data;
000044  4819              LDR      r0,|L3.172|
000046  8801              LDRH     r1,[r0,#0]
000048  4039              ANDS     r1,r1,r7
00004a  8001              STRH     r1,[r0,#0]
;;;728            
;;;729            /* Wait for last operation to be completed */
;;;730            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00004c  4648              MOV      r0,r9
00004e  f7fffffe          BL       FLASH_WaitForLastOperation
000052  b9f8              CBNZ     r0,|L3.148|
                  |L3.84|
;;;731          }
;;;732    #endif /* FLASH_WRP0_WRP0 */
;;;733    
;;;734    #if defined(FLASH_WRP1_WRP1)
;;;735          if((status == HAL_OK) && (WRP1_Data != 0xFFU))
000054  2eff              CMP      r6,#0xff
000056  d008              BEQ      |L3.106|
;;;736          {
;;;737            OB->WRP1 &= WRP1_Data;
000058  4814              LDR      r0,|L3.172|
00005a  1c80              ADDS     r0,r0,#2
00005c  8801              LDRH     r1,[r0,#0]
00005e  4031              ANDS     r1,r1,r6
000060  8001              STRH     r1,[r0,#0]
;;;738            
;;;739            /* Wait for last operation to be completed */
;;;740            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000062  4648              MOV      r0,r9
000064  f7fffffe          BL       FLASH_WaitForLastOperation
000068  b9a0              CBNZ     r0,|L3.148|
                  |L3.106|
;;;741          }
;;;742    #endif /* FLASH_WRP1_WRP1 */
;;;743    
;;;744    #if defined(FLASH_WRP2_WRP2)
;;;745          if((status == HAL_OK) && (WRP2_Data != 0xFFU))
00006a  2dff              CMP      r5,#0xff
00006c  d008              BEQ      |L3.128|
;;;746          {
;;;747            OB->WRP2 &= WRP2_Data;
00006e  480f              LDR      r0,|L3.172|
000070  1d00              ADDS     r0,r0,#4
000072  8801              LDRH     r1,[r0,#0]
000074  4029              ANDS     r1,r1,r5
000076  8001              STRH     r1,[r0,#0]
;;;748            
;;;749            /* Wait for last operation to be completed */
;;;750            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000078  4648              MOV      r0,r9
00007a  f7fffffe          BL       FLASH_WaitForLastOperation
00007e  b948              CBNZ     r0,|L3.148|
                  |L3.128|
;;;751          }
;;;752    #endif /* FLASH_WRP2_WRP2 */
;;;753    
;;;754    #if defined(FLASH_WRP3_WRP3)
;;;755          if((status == HAL_OK) && (WRP3_Data != 0xFFU))
000080  2cff              CMP      r4,#0xff
000082  d007              BEQ      |L3.148|
;;;756          {
;;;757            OB->WRP3 &= WRP3_Data;
000084  4809              LDR      r0,|L3.172|
000086  1d80              ADDS     r0,r0,#6
000088  8801              LDRH     r1,[r0,#0]
00008a  4021              ANDS     r1,r1,r4
00008c  8001              STRH     r1,[r0,#0]
;;;758            
;;;759            /* Wait for last operation to be completed */
;;;760            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00008e  4648              MOV      r0,r9
000090  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L3.148|
;;;761          }
;;;762    #endif /* FLASH_WRP3_WRP3 */
;;;763    
;;;764          /* if the program operation is completed, disable the OPTPG Bit */
;;;765          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000094  f8d82010          LDR      r2,[r8,#0x10]
000098  f0220210          BIC      r2,r2,#0x10
00009c  f8c82010          STR      r2,[r8,#0x10]
                  |L3.160|
;;;766        }
;;;767      }
;;;768      
;;;769      return status;
;;;770    }
0000a0  e8bd87f0          POP      {r4-r10,pc}
;;;771    
                          ENDP

                  |L3.164|
                          DCD      0x40022000
                  |L3.168|
                          DCD      pFlash
                  |L3.172|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;1049     */
;;;1050   static uint32_t FLASH_OB_GetRDP(void)
000000  4904              LDR      r1,|L4.20|
;;;1051   {
;;;1052     uint32_t readstatus = OB_RDP_LEVEL_0;
000002  20a5              MOVS     r0,#0xa5
;;;1053     uint32_t tmp_reg = 0U;
;;;1054     
;;;1055     /* Read RDP level bits */
;;;1056     tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
000004  69c9              LDR      r1,[r1,#0x1c]
000006  f0010102          AND      r1,r1,#2
;;;1057   
;;;1058     if (tmp_reg == FLASH_OBR_RDPRT)
00000a  2902              CMP      r1,#2
00000c  d100              BNE      |L4.16|
;;;1059     {
;;;1060       readstatus = OB_RDP_LEVEL_1;
00000e  2000              MOVS     r0,#0
                  |L4.16|
;;;1061     }
;;;1062     else 
;;;1063     {
;;;1064       readstatus = OB_RDP_LEVEL_0;
;;;1065     }
;;;1066   
;;;1067     return readstatus;
;;;1068   }
000010  4770              BX       lr
;;;1069   
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_RDP_LevelConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDP_LevelConfig PROC
;;;901      */
;;;902    static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
000000  b570              PUSH     {r4-r6,lr}
;;;903    {
000002  4606              MOV      r6,r0
;;;904      HAL_StatusTypeDef status = HAL_OK;
;;;905      
;;;906      /* Check the parameters */
;;;907      assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
;;;908      
;;;909      /* Wait for last operation to be completed */
;;;910      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000004  f24c3550          MOV      r5,#0xc350
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;911      
;;;912      if(status == HAL_OK)
00000e  2800              CMP      r0,#0
000010  d120              BNE      |L5.84|
;;;913      { 
;;;914        /* Clean the error context */
;;;915        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000012  4911              LDR      r1,|L5.88|
000014  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;916        
;;;917        /* If the previous operation is completed, proceed to erase the option bytes */
;;;918        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
000016  4c11              LDR      r4,|L5.92|
000018  6920              LDR      r0,[r4,#0x10]
00001a  f0400020          ORR      r0,r0,#0x20
00001e  6120              STR      r0,[r4,#0x10]
;;;919        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000020  6920              LDR      r0,[r4,#0x10]
000022  f0400040          ORR      r0,r0,#0x40
000026  6120              STR      r0,[r4,#0x10]
;;;920    
;;;921        /* Wait for last operation to be completed */
;;;922        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;923    
;;;924        /* If the erase operation is completed, disable the OPTER Bit */
;;;925        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
00002e  6921              LDR      r1,[r4,#0x10]
000030  f0210120          BIC      r1,r1,#0x20
000034  6121              STR      r1,[r4,#0x10]
;;;926    
;;;927        if(status == HAL_OK)
000036  2800              CMP      r0,#0
000038  d10c              BNE      |L5.84|
;;;928        {
;;;929          /* Enable the Option Bytes Programming operation */
;;;930          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
00003a  6920              LDR      r0,[r4,#0x10]
00003c  f0400010          ORR      r0,r0,#0x10
000040  6120              STR      r0,[r4,#0x10]
;;;931          
;;;932          WRITE_REG(OB->RDP, ReadProtectLevel);
000042  4807              LDR      r0,|L5.96|
000044  8006              STRH     r6,[r0,#0]
;;;933          
;;;934          /* Wait for last operation to be completed */
;;;935          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       FLASH_WaitForLastOperation
;;;936          
;;;937          /* if the program operation is completed, disable the OPTPG Bit */
;;;938          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
00004c  6921              LDR      r1,[r4,#0x10]
00004e  f0210110          BIC      r1,r1,#0x10
000052  6121              STR      r1,[r4,#0x10]
                  |L5.84|
;;;939        }
;;;940      }
;;;941      
;;;942      return status;
;;;943    }
000054  bd70              POP      {r4-r6,pc}
;;;944    
                          ENDP

000056  0000              DCW      0x0000
                  |L5.88|
                          DCD      pFlash
                  |L5.92|
                          DCD      0x40022000
                  |L5.96|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_PageErase||, CODE, READONLY, ALIGN=2

                  FLASH_PageErase PROC
;;;1104     */
;;;1105   void FLASH_PageErase(uint32_t PageAddress)
000000  4a06              LDR      r2,|L6.28|
;;;1106   {
;;;1107     /* Clean the error context */
;;;1108     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  2100              MOVS     r1,#0
000004  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;1109   
;;;1110   #if defined(FLASH_BANK2_END)
;;;1111     if(PageAddress > FLASH_BANK1_END)
;;;1112     { 
;;;1113       /* Proceed to erase the page */
;;;1114       SET_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;1115       WRITE_REG(FLASH->AR2, PageAddress);
;;;1116       SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;1117     }
;;;1118     else
;;;1119     {
;;;1120   #endif /* FLASH_BANK2_END */
;;;1121       /* Proceed to erase the page */
;;;1122       SET_BIT(FLASH->CR, FLASH_CR_PER);
000006  4906              LDR      r1,|L6.32|
000008  690a              LDR      r2,[r1,#0x10]
00000a  f0420202          ORR      r2,r2,#2
00000e  610a              STR      r2,[r1,#0x10]
;;;1123       WRITE_REG(FLASH->AR, PageAddress);
000010  6148              STR      r0,[r1,#0x14]
;;;1124       SET_BIT(FLASH->CR, FLASH_CR_STRT);
000012  6908              LDR      r0,[r1,#0x10]
000014  f0400040          ORR      r0,r0,#0x40
000018  6108              STR      r0,[r1,#0x10]
;;;1125   #if defined(FLASH_BANK2_END)
;;;1126     }
;;;1127   #endif /* FLASH_BANK2_END */
;;;1128   }
00001a  4770              BX       lr
;;;1129   
                          ENDP

                  |L6.28|
                          DCD      pFlash
                  |L6.32|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase PROC
;;;174      */
;;;175    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;176    {
000004  4605              MOV      r5,r0
;;;177      HAL_StatusTypeDef status = HAL_ERROR;
;;;178      uint32_t address = 0U;
;;;179    
;;;180      /* Process Locked */
;;;181      __HAL_LOCK(&pFlash);
000006  4826              LDR      r0,|L7.160|
000008  460f              MOV      r7,r1                 ;176
00000a  2601              MOVS     r6,#1                 ;177
00000c  7e01              LDRB     r1,[r0,#0x18]  ; pFlash
00000e  2901              CMP      r1,#1
000010  d00f              BEQ      |L7.50|
000012  2101              MOVS     r1,#1
000014  4681              MOV      r9,r0
000016  7601              STRB     r1,[r0,#0x18]
;;;182    
;;;183      /* Check the parameters */
;;;184      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;185    
;;;186      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
000018  6828              LDR      r0,[r5,#0]
;;;187      {
;;;188    #if defined(FLASH_BANK2_END)
;;;189        if (pEraseInit->Banks == FLASH_BANK_BOTH)
;;;190        {
;;;191          /* Mass Erase requested for Bank1 and Bank2 */
;;;192          /* Wait for last operation to be completed */
;;;193          if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;194              (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;195          {
;;;196            /*Mass erase to be done*/
;;;197            FLASH_MassErase(FLASH_BANK_BOTH);
;;;198            
;;;199            /* Wait for last operation to be completed */
;;;200            if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;201                (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;202            {
;;;203              status = HAL_OK;
;;;204            }
;;;205            
;;;206            /* If the erase operation is completed, disable the MER Bit */
;;;207            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;208            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;209          }
;;;210        }
;;;211        else if (pEraseInit->Banks == FLASH_BANK_2)
;;;212        {
;;;213          /* Mass Erase requested for Bank2 */
;;;214          /* Wait for last operation to be completed */
;;;215          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;216          {
;;;217            /*Mass erase to be done*/
;;;218            FLASH_MassErase(FLASH_BANK_2);
;;;219            
;;;220            /* Wait for last operation to be completed */
;;;221            status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;222            
;;;223            /* If the erase operation is completed, disable the MER Bit */
;;;224            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;225          }
;;;226        }
;;;227        else 
;;;228    #endif /* FLASH_BANK2_END */
;;;229        {
;;;230          /* Mass Erase requested for Bank1 */
;;;231          /* Wait for last operation to be completed */
;;;232          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;233          {
;;;234            /*Mass erase to be done*/
;;;235            FLASH_MassErase(FLASH_BANK_1);
;;;236            
;;;237            /* Wait for last operation to be completed */
;;;238            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;239            
;;;240            /* If the erase operation is completed, disable the MER Bit */
;;;241            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
00001a  f8df8088          LDR      r8,|L7.164|
00001e  f24c3450          MOV      r4,#0xc350            ;232
000022  2802              CMP      r0,#2                 ;186
000024  d008              BEQ      |L7.56|
;;;242          }
;;;243        }
;;;244      }
;;;245      else
;;;246      {
;;;247        /* Page Erase is requested */
;;;248        /* Check the parameters */
;;;249        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;250        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;251        
;;;252    #if defined(FLASH_BANK2_END)
;;;253        /* Page Erase requested on address located on bank2 */
;;;254        if(pEraseInit->PageAddress > FLASH_BANK1_END)
;;;255        {   
;;;256          /* Wait for last operation to be completed */
;;;257          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;258          {
;;;259            /*Initialization of PageError variable*/
;;;260            *PageError = 0xFFFFFFFFU;
;;;261            
;;;262            /* Erase by page by page to be done*/
;;;263            for(address = pEraseInit->PageAddress;
;;;264                address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
;;;265                address += FLASH_PAGE_SIZE)
;;;266            {
;;;267              FLASH_PageErase(address);
;;;268              
;;;269              /* Wait for last operation to be completed */
;;;270              status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;271              
;;;272              /* If the erase operation is completed, disable the PER Bit */
;;;273              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;274              
;;;275              if (status != HAL_OK)
;;;276              {
;;;277                /* In case of error, stop erase procedure and return the faulty address */
;;;278                *PageError = address;
;;;279                break;
;;;280              }
;;;281            }
;;;282          }
;;;283        }
;;;284        else
;;;285    #endif /* FLASH_BANK2_END */
;;;286       {
;;;287          /* Page Erase requested on address located on bank1 */
;;;288          /* Wait for last operation to be completed */
;;;289          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
000026  46a2              MOV      r10,r4
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       FLASH_WaitForLastOperation
00002e  b1a8              CBZ      r0,|L7.92|
000030  e031              B        |L7.150|
                  |L7.50|
000032  2002              MOVS     r0,#2                 ;181
                  |L7.52|
;;;290          {
;;;291            /*Initialization of PageError variable*/
;;;292            *PageError = 0xFFFFFFFFU;
;;;293            
;;;294            /* Erase page by page to be done*/
;;;295            for(address = pEraseInit->PageAddress;
;;;296                address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
;;;297                address += FLASH_PAGE_SIZE)
;;;298            {
;;;299              FLASH_PageErase(address);
;;;300              
;;;301              /* Wait for last operation to be completed */
;;;302              status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;303              
;;;304              /* If the erase operation is completed, disable the PER Bit */
;;;305              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;306              
;;;307              if (status != HAL_OK)
;;;308              {
;;;309                /* In case of error, stop erase procedure and return the faulty address */
;;;310                *PageError = address;
;;;311                break;
;;;312              }
;;;313            }
;;;314          }
;;;315        }
;;;316      }
;;;317    
;;;318      /* Process Unlocked */
;;;319      __HAL_UNLOCK(&pFlash);
;;;320    
;;;321      return status;
;;;322    }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L7.56|
000038  4620              MOV      r0,r4                 ;232
00003a  f7fffffe          BL       FLASH_WaitForLastOperation
00003e  bb08              CBNZ     r0,|L7.132|
000040  2001              MOVS     r0,#1                 ;235
000042  f7fffffe          BL       FLASH_MassErase
000046  4620              MOV      r0,r4                 ;238
000048  f7fffffe          BL       FLASH_WaitForLastOperation
00004c  f8d81010          LDR      r1,[r8,#0x10]         ;241
000050  4606              MOV      r6,r0                 ;238
000052  f0210104          BIC      r1,r1,#4              ;241
000056  f8c81010          STR      r1,[r8,#0x10]         ;241
00005a  e01c              B        |L7.150|
                  |L7.92|
00005c  f04f30ff          MOV      r0,#0xffffffff        ;292
000060  6038              STR      r0,[r7,#0]            ;295
000062  68ac              LDR      r4,[r5,#8]            ;295
000064  e011              B        |L7.138|
                  |L7.102|
000066  4620              MOV      r0,r4                 ;299
000068  f7fffffe          BL       FLASH_PageErase
00006c  4650              MOV      r0,r10                ;302
00006e  f7fffffe          BL       FLASH_WaitForLastOperation
000072  f8d81010          LDR      r1,[r8,#0x10]         ;305
000076  0006              MOVS     r6,r0                 ;302
000078  f0210102          BIC      r1,r1,#2              ;305
00007c  f8c81010          STR      r1,[r8,#0x10]         ;305
000080  d001              BEQ      |L7.134|
000082  603c              STR      r4,[r7,#0]            ;311
                  |L7.132|
000084  e007              B        |L7.150|
                  |L7.134|
000086  f5046480          ADD      r4,r4,#0x400          ;311
                  |L7.138|
00008a  e9d50102          LDRD     r0,r1,[r5,#8]         ;311
00008e  eb002081          ADD      r0,r0,r1,LSL #10      ;296
000092  42a0              CMP      r0,r4                 ;296
000094  d8e7              BHI      |L7.102|
                  |L7.150|
000096  2100              MOVS     r1,#0                 ;319
000098  f8891018          STRB     r1,[r9,#0x18]         ;319
00009c  4630              MOV      r0,r6                 ;321
00009e  e7c9              B        |L7.52|
;;;323    
                          ENDP

                  |L7.160|
                          DCD      pFlash
                  |L7.164|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase_IT PROC
;;;334      */
;;;335    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
000000  b570              PUSH     {r4-r6,lr}
;;;336    {
;;;337      HAL_StatusTypeDef status = HAL_OK;
;;;338    
;;;339      /* Process Locked */
;;;340      __HAL_LOCK(&pFlash);
000002  4912              LDR      r1,|L8.76|
000004  2400              MOVS     r4,#0                 ;337
000006  7e0a              LDRB     r2,[r1,#0x18]  ; pFlash
000008  2a01              CMP      r2,#1
00000a  d005              BEQ      |L8.24|
00000c  2201              MOVS     r2,#1
00000e  760a              STRB     r2,[r1,#0x18]
;;;341    
;;;342      /* If procedure already ongoing, reject the next one */
;;;343      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
000010  780b              LDRB     r3,[r1,#0]  ; pFlash
000012  b11b              CBZ      r3,|L8.28|
;;;344      {
;;;345        return HAL_ERROR;
000014  2001              MOVS     r0,#1
;;;346      }
;;;347      
;;;348      /* Check the parameters */
;;;349      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;350    
;;;351      /* Enable End of FLASH Operation and Error source interrupts */
;;;352      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;353    
;;;354    #if defined(FLASH_BANK2_END)
;;;355      /* Enable End of FLASH Operation and Error source interrupts */
;;;356      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;357      
;;;358    #endif
;;;359      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;360      {
;;;361        /*Mass erase to be done*/
;;;362        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
;;;363            FLASH_MassErase(pEraseInit->Banks);
;;;364      }
;;;365      else
;;;366      {
;;;367        /* Erase by page to be done*/
;;;368    
;;;369        /* Check the parameters */
;;;370        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;371        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;372    
;;;373        pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
;;;374        pFlash.DataRemaining = pEraseInit->NbPages;
;;;375        pFlash.Address = pEraseInit->PageAddress;
;;;376    
;;;377        /*Erase 1st page and wait for IT*/
;;;378        FLASH_PageErase(pEraseInit->PageAddress);
;;;379      }
;;;380    
;;;381      return status;
;;;382    }
000016  bd70              POP      {r4-r6,pc}
                  |L8.24|
000018  2002              MOVS     r0,#2                 ;340
00001a  bd70              POP      {r4-r6,pc}
                  |L8.28|
00001c  4b0c              LDR      r3,|L8.80|
00001e  691d              LDR      r5,[r3,#0x10]         ;352
000020  f44555a0          ORR      r5,r5,#0x1400         ;352
000024  611d              STR      r5,[r3,#0x10]         ;352
000026  6803              LDR      r3,[r0,#0]            ;359
000028  2b02              CMP      r3,#2                 ;359
00002a  d009              BEQ      |L8.64|
00002c  700a              STRB     r2,[r1,#0]            ;373
00002e  68c2              LDR      r2,[r0,#0xc]          ;374
000030  604a              STR      r2,[r1,#4]            ;374  ; pFlash
000032  6882              LDR      r2,[r0,#8]            ;375
000034  608a              STR      r2,[r1,#8]            ;375  ; pFlash
000036  6880              LDR      r0,[r0,#8]            ;378
000038  f7fffffe          BL       FLASH_PageErase
                  |L8.60|
00003c  4620              MOV      r0,r4                 ;381
00003e  bd70              POP      {r4-r6,pc}
                  |L8.64|
000040  2202              MOVS     r2,#2                 ;362
000042  700a              STRB     r2,[r1,#0]            ;362
000044  6840              LDR      r0,[r0,#4]            ;363
000046  f7fffffe          BL       FLASH_MassErase
00004a  e7f7              B        |L8.60|
;;;383    
                          ENDP

                  |L8.76|
                          DCD      pFlash
                  |L8.80|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBErase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBErase PROC
;;;412    
;;;413    HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
000000  b570              PUSH     {r4-r6,lr}
;;;414    {
;;;415      uint8_t rdptmp = OB_RDP_LEVEL_0;
;;;416      HAL_StatusTypeDef status = HAL_ERROR;
;;;417    
;;;418      /* Get the actual read protection Option Byte value */
;;;419      rdptmp = FLASH_OB_GetRDP();
000002  f7fffffe          BL       FLASH_OB_GetRDP
000006  b2c5              UXTB     r5,r0
;;;420    
;;;421      /* Wait for last operation to be completed */
;;;422      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000008  f24c3650          MOV      r6,#0xc350
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;423    
;;;424      if(status == HAL_OK)
000012  2800              CMP      r0,#0
000014  d118              BNE      |L9.72|
;;;425      {
;;;426        /* Clean the error context */
;;;427        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000016  490d              LDR      r1,|L9.76|
000018  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;428    
;;;429        /* If the previous operation is completed, proceed to erase the option bytes */
;;;430        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
00001a  4c0d              LDR      r4,|L9.80|
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f0400020          ORR      r0,r0,#0x20
000022  6120              STR      r0,[r4,#0x10]
;;;431        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000024  6920              LDR      r0,[r4,#0x10]
000026  f0400040          ORR      r0,r0,#0x40
00002a  6120              STR      r0,[r4,#0x10]
;;;432    
;;;433        /* Wait for last operation to be completed */
;;;434        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       FLASH_WaitForLastOperation
;;;435    
;;;436        /* If the erase operation is completed, disable the OPTER Bit */
;;;437        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
000032  6921              LDR      r1,[r4,#0x10]
000034  f0210120          BIC      r1,r1,#0x20
000038  6121              STR      r1,[r4,#0x10]
;;;438    
;;;439        if(status == HAL_OK)
00003a  2800              CMP      r0,#0
00003c  d104              BNE      |L9.72|
;;;440        {
;;;441          /* Restore the last read protection Option Byte value */
;;;442          status = FLASH_OB_RDP_LevelConfig(rdptmp);
00003e  4628              MOV      r0,r5
000040  e8bd4070          POP      {r4-r6,lr}
000044  f7ffbffe          B.W      FLASH_OB_RDP_LevelConfig
                  |L9.72|
;;;443        }
;;;444      }
;;;445    
;;;446      /* Return the erase status */
;;;447      return status;
;;;448    }
000048  bd70              POP      {r4-r6,pc}
;;;449    
                          ENDP

00004a  0000              DCW      0x0000
                  |L9.76|
                          DCD      pFlash
                  |L9.80|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBGetConfig||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBGetConfig PROC
;;;542      */
;;;543    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b570              PUSH     {r4-r6,lr}
;;;544    {
000002  4604              MOV      r4,r0
000004  4d06              LDR      r5,|L10.32|
;;;545      pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
000006  2007              MOVS     r0,#7
000008  6020              STR      r0,[r4,#0]
00000a  6a28              LDR      r0,[r5,#0x20]
;;;546    
;;;547      /*Get WRP*/
;;;548      pOBInit->WRPPage = FLASH_OB_GetWRP();
;;;549    
;;;550      /*Get RDP Level*/
;;;551      pOBInit->RDPLevel = FLASH_OB_GetRDP();
00000c  60a0              STR      r0,[r4,#8]
00000e  f7fffffe          BL       FLASH_OB_GetRDP
000012  7420              STRB     r0,[r4,#0x10]
000014  69e8              LDR      r0,[r5,#0x1c]
000016  f3c00082          UBFX     r0,r0,#2,#3
;;;552    
;;;553      /*Get USER*/
;;;554      pOBInit->USERConfig = FLASH_OB_GetUser();
00001a  7460              STRB     r0,[r4,#0x11]
;;;555    }
00001c  bd70              POP      {r4-r6,pc}
;;;556    
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBGetUserData||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBGetUserData PROC
;;;564      */
;;;565    uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
000000  4a05              LDR      r2,|L11.24|
;;;566    {
;;;567      uint32_t value = 0;
;;;568      
;;;569      if (DATAAdress == OB_DATA_ADDRESS_DATA0)
;;;570      {
;;;571        /* Get value programmed in OB USER Data0 */
;;;572        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
000002  4906              LDR      r1,|L11.28|
000004  4290              CMP      r0,r2                 ;569
;;;573      }
;;;574      else
;;;575      {
;;;576        /* Get value programmed in OB USER Data1 */
;;;577        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
000006  69c8              LDR      r0,[r1,#0x1c]
000008  d102              BNE      |L11.16|
00000a  f3c02087          UBFX     r0,r0,#10,#8          ;572
;;;578      }
;;;579      
;;;580      return value;
;;;581    }
00000e  4770              BX       lr
                  |L11.16|
000010  f3c04087          UBFX     r0,r0,#18,#8          ;577
000014  4770              BX       lr
;;;582    
                          ENDP

000016  0000              DCW      0x0000
                  |L11.24|
                          DCD      0x1ffff804
                  |L11.28|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBProgram PROC
;;;461      */
;;;462    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;463    {
;;;464      HAL_StatusTypeDef status = HAL_ERROR;
;;;465    
;;;466      /* Process Locked */
;;;467      __HAL_LOCK(&pFlash);
000004  4d2d              LDR      r5,|L12.188|
000006  4604              MOV      r4,r0                 ;463
000008  2001              MOVS     r0,#1                 ;464
00000a  7e29              LDRB     r1,[r5,#0x18]  ; pFlash
00000c  2901              CMP      r1,#1
00000e  d00e              BEQ      |L12.46|
000010  2101              MOVS     r1,#1
000012  7629              STRB     r1,[r5,#0x18]
;;;468    
;;;469      /* Check the parameters */
;;;470      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;471    
;;;472      /* Write protection configuration */
;;;473      if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
000014  7821              LDRB     r1,[r4,#0]
000016  f04f0700          MOV      r7,#0
00001a  07c9              LSLS     r1,r1,#31
00001c  d00d              BEQ      |L12.58|
;;;474      {
;;;475        assert_param(IS_WRPSTATE(pOBInit->WRPState));
;;;476        if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
00001e  6860              LDR      r0,[r4,#4]
000020  2801              CMP      r0,#1
000022  68a0              LDR      r0,[r4,#8]
000024  d006              BEQ      |L12.52|
;;;477        {
;;;478          /* Enable of Write protection on the selected page */
;;;479          status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
;;;480        }
;;;481        else
;;;482        {
;;;483          /* Disable of Write protection on the selected page */
;;;484          status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
000026  f7fffffe          BL       FLASH_OB_DisableWRP
                  |L12.42|
;;;485        }
;;;486        if (status != HAL_OK)
00002a  bbe8              CBNZ     r0,|L12.168|
00002c  e005              B        |L12.58|
                  |L12.46|
00002e  2002              MOVS     r0,#2                 ;467
                  |L12.48|
;;;487        {
;;;488          /* Process Unlocked */
;;;489          __HAL_UNLOCK(&pFlash);
;;;490          return status;
;;;491        }
;;;492      }
;;;493    
;;;494      /* Read protection configuration */
;;;495      if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
;;;496      {
;;;497        status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
;;;498        if (status != HAL_OK)
;;;499        {
;;;500          /* Process Unlocked */
;;;501          __HAL_UNLOCK(&pFlash);
;;;502          return status;
;;;503        }
;;;504      }
;;;505    
;;;506      /* USER configuration */
;;;507      if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
;;;508      {
;;;509        status = FLASH_OB_UserConfig(pOBInit->USERConfig);
;;;510        if (status != HAL_OK)
;;;511        {
;;;512          /* Process Unlocked */
;;;513          __HAL_UNLOCK(&pFlash);
;;;514          return status;
;;;515        }
;;;516      }
;;;517    
;;;518      /* DATA configuration*/
;;;519      if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
;;;520      {
;;;521        status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
;;;522        if (status != HAL_OK)
;;;523        {
;;;524          /* Process Unlocked */
;;;525          __HAL_UNLOCK(&pFlash);
;;;526          return status;
;;;527        }
;;;528      }
;;;529    
;;;530      /* Process Unlocked */
;;;531      __HAL_UNLOCK(&pFlash);
;;;532    
;;;533      return status;
;;;534    }
000030  e8bd87f0          POP      {r4-r10,pc}
                  |L12.52|
000034  f7fffffe          BL       FLASH_OB_EnableWRP
000038  e7f7              B        |L12.42|
                  |L12.58|
00003a  7821              LDRB     r1,[r4,#0]            ;495
00003c  0789              LSLS     r1,r1,#30             ;495
00003e  d503              BPL      |L12.72|
000040  7c20              LDRB     r0,[r4,#0x10]         ;497
000042  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
000046  bb78              CBNZ     r0,|L12.168|
                  |L12.72|
000048  7821              LDRB     r1,[r4,#0]            ;507
00004a  4e1d              LDR      r6,|L12.192|
00004c  0749              LSLS     r1,r1,#29             ;507
00004e  f24c3950          MOV      r9,#0xc350            ;507
000052  d516              BPL      |L12.130|
000054  f8948011          LDRB     r8,[r4,#0x11]         ;509
000058  4648              MOV      r0,r9                 ;509
00005a  f7fffffe          BL       FLASH_WaitForLastOperation
00005e  b978              CBNZ     r0,|L12.128|
000060  61ef              STR      r7,[r5,#0x1c]         ;509  ; pFlash
000062  6930              LDR      r0,[r6,#0x10]         ;509
000064  f0400010          ORR      r0,r0,#0x10           ;509
000068  6130              STR      r0,[r6,#0x10]         ;509
00006a  4916              LDR      r1,|L12.196|
00006c  f0480088          ORR      r0,r8,#0x88           ;509
000070  8008              STRH     r0,[r1,#0]            ;509
000072  4648              MOV      r0,r9                 ;509
000074  f7fffffe          BL       FLASH_WaitForLastOperation
000078  6931              LDR      r1,[r6,#0x10]         ;509
00007a  f0210110          BIC      r1,r1,#0x10           ;509
00007e  6131              STR      r1,[r6,#0x10]         ;509
                  |L12.128|
000080  b990              CBNZ     r0,|L12.168|
                  |L12.130|
000082  7821              LDRB     r1,[r4,#0]            ;519
000084  0709              LSLS     r1,r1,#28             ;519
000086  d516              BPL      |L12.182|
000088  f8d48014          LDR      r8,[r4,#0x14]         ;521
00008c  7e24              LDRB     r4,[r4,#0x18]         ;521
00008e  4648              MOV      r0,r9                 ;521
000090  f7fffffe          BL       FLASH_WaitForLastOperation
000094  b940              CBNZ     r0,|L12.168|
000096  61ef              STR      r7,[r5,#0x1c]         ;521  ; pFlash
000098  6930              LDR      r0,[r6,#0x10]         ;521
00009a  f0400010          ORR      r0,r0,#0x10           ;521
00009e  6130              STR      r0,[r6,#0x10]         ;521
0000a0  f8a84000          STRH     r4,[r8,#0]            ;521
0000a4  4648              MOV      r0,r9                 ;521
0000a6  e000              B        |L12.170|
                  |L12.168|
0000a8  e005              B        |L12.182|
                  |L12.170|
0000aa  f7fffffe          BL       FLASH_WaitForLastOperation
0000ae  6931              LDR      r1,[r6,#0x10]         ;521
0000b0  f0210110          BIC      r1,r1,#0x10           ;521
0000b4  6131              STR      r1,[r6,#0x10]         ;521
                  |L12.182|
0000b6  762f              STRB     r7,[r5,#0x18]         ;531
0000b8  e7ba              B        |L12.48|
;;;535    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L12.188|
                          DCD      pFlash
                  |L12.192|
                          DCD      0x40022000
                  |L12.196|
                          DCD      0x1ffff802

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH|
#line 402
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX|
#line 587
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
