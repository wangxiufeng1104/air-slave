; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f1xx_hal.o --asm_dir=.\air_slave\ --list_dir=.\air_slave\ --depend=.\stm32f1xx_hal.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_air_slave -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\stm32f1xx_hal.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c]
                          THUMB

                          AREA ||i.HAL_DBGMCU_DisableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGSleepMode PROC
;;;482      */
;;;483    void HAL_DBGMCU_DisableDBGSleepMode(void)
000000  4802              LDR      r0,|L1.12|
;;;484    {
;;;485      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6841              LDR      r1,[r0,#4]
000004  f0210101          BIC      r1,r1,#1
000008  6041              STR      r1,[r0,#4]
;;;486    }
00000a  4770              BX       lr
;;;487    
                          ENDP

                  |L1.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStandbyMode PROC
;;;560      */
;;;561    void HAL_DBGMCU_DisableDBGStandbyMode(void)
000000  4802              LDR      r0,|L2.12|
;;;562    {
;;;563      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6841              LDR      r1,[r0,#4]
000004  f0210104          BIC      r1,r1,#4
000008  6041              STR      r1,[r0,#4]
;;;564    }
00000a  4770              BX       lr
;;;565    
                          ENDP

                  |L2.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStopMode PROC
;;;528      */
;;;529    void HAL_DBGMCU_DisableDBGStopMode(void)
000000  4802              LDR      r0,|L3.12|
;;;530    {
;;;531      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6841              LDR      r1,[r0,#4]
000004  f0210102          BIC      r1,r1,#2
000008  6041              STR      r1,[r0,#4]
;;;532    }
00000a  4770              BX       lr
;;;533    
                          ENDP

                  |L3.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGSleepMode PROC
;;;466      */
;;;467    void HAL_DBGMCU_EnableDBGSleepMode(void)
000000  4802              LDR      r0,|L4.12|
;;;468    {
;;;469      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6841              LDR      r1,[r0,#4]
000004  f0410101          ORR      r1,r1,#1
000008  6041              STR      r1,[r0,#4]
;;;470    }
00000a  4770              BX       lr
;;;471    
                          ENDP

                  |L4.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStandbyMode PROC
;;;544      */
;;;545    void HAL_DBGMCU_EnableDBGStandbyMode(void)
000000  4802              LDR      r0,|L5.12|
;;;546    {
;;;547      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6841              LDR      r1,[r0,#4]
000004  f0410104          ORR      r1,r1,#4
000008  6041              STR      r1,[r0,#4]
;;;548    }
00000a  4770              BX       lr
;;;549    
                          ENDP

                  |L5.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStopMode PROC
;;;512      */
;;;513    void HAL_DBGMCU_EnableDBGStopMode(void)
000000  4802              LDR      r0,|L6.12|
;;;514    {
;;;515      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6841              LDR      r1,[r0,#4]
000004  f0410102          ORR      r1,r1,#2
000008  6041              STR      r1,[r0,#4]
;;;516    }
00000a  4770              BX       lr
;;;517    
                          ENDP

                  |L6.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DeInit PROC
;;;190      */
;;;191    HAL_StatusTypeDef HAL_DeInit(void)
000000  4806              LDR      r0,|L7.28|
;;;192    {
000002  b510              PUSH     {r4,lr}
;;;193      /* Reset of all peripherals */
;;;194      __HAL_RCC_APB1_FORCE_RESET();
000004  f04f31ff          MOV      r1,#0xffffffff
000008  60c1              STR      r1,[r0,#0xc]
;;;195      __HAL_RCC_APB1_RELEASE_RESET();
00000a  2200              MOVS     r2,#0
00000c  6102              STR      r2,[r0,#0x10]
;;;196    
;;;197      __HAL_RCC_APB2_FORCE_RESET();
00000e  60c1              STR      r1,[r0,#0xc]
;;;198      __HAL_RCC_APB2_RELEASE_RESET();
000010  60c2              STR      r2,[r0,#0xc]
;;;199    
;;;200    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;201      __HAL_RCC_AHB_FORCE_RESET();
;;;202      __HAL_RCC_AHB_RELEASE_RESET();
;;;203    #endif
;;;204    
;;;205      /* De-Init the low level hardware */
;;;206      HAL_MspDeInit();
000012  f7fffffe          BL       HAL_MspDeInit
;;;207    
;;;208      /* Return function status */
;;;209      return HAL_OK;
000016  2000              MOVS     r0,#0
;;;210    }
000018  bd10              POP      {r4,pc}
;;;211    
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      0x40021000

                          AREA ||i.HAL_Delay||, CODE, READONLY, ALIGN=2

                  HAL_Delay PROC
;;;373      */
;;;374    __weak void HAL_Delay(uint32_t Delay)
000000  b570              PUSH     {r4-r6,lr}
;;;375    {
000002  4604              MOV      r4,r0
;;;376      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4605              MOV      r5,r0
;;;377      uint32_t wait = Delay;
;;;378    
;;;379      /* Add a freq to guarantee minimum wait */
;;;380      if (wait < HAL_MAX_DELAY)
00000a  1c60              ADDS     r0,r4,#1
00000c  d002              BEQ      |L8.20|
;;;381      {
;;;382        wait += (uint32_t)(uwTickFreq);
00000e  4804              LDR      r0,|L8.32|
000010  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
000012  4404              ADD      r4,r4,r0
                  |L8.20|
;;;383      }
;;;384    
;;;385      while ((HAL_GetTick() - tickstart) < wait)
000014  f7fffffe          BL       HAL_GetTick
000018  1b40              SUBS     r0,r0,r5
00001a  42a0              CMP      r0,r4
00001c  d3fa              BCC      |L8.20|
;;;386      {
;;;387      }
;;;388    }
00001e  bd70              POP      {r4-r6,pc}
;;;389    
                          ENDP

                  |L8.32|
                          DCD      ||.data||

                          AREA ||i.HAL_GetDEVID||, CODE, READONLY, ALIGN=2

                  HAL_GetDEVID PROC
;;;457      */
;;;458    uint32_t HAL_GetDEVID(void)
000000  4802              LDR      r0,|L9.12|
;;;459    {
;;;460      return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  f3c0000b          UBFX     r0,r0,#0,#12
;;;461    }
000008  4770              BX       lr
;;;462    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetHalVersion||, CODE, READONLY, ALIGN=2

                  HAL_GetHalVersion PROC
;;;425      */
;;;426    uint32_t HAL_GetHalVersion(void)
000000  4800              LDR      r0,|L10.4|
;;;427    {
;;;428      return __STM32F1xx_HAL_VERSION;
;;;429    }
000002  4770              BX       lr
;;;430    
                          ENDP

                  |L10.4|
                          DCD      0x01010200

                          AREA ||i.HAL_GetREVID||, CODE, READONLY, ALIGN=2

                  HAL_GetREVID PROC
;;;441      */
;;;442    uint32_t HAL_GetREVID(void)
000000  4801              LDR      r0,|L11.8|
;;;443    {
;;;444      return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
000002  6800              LDR      r0,[r0,#0]
000004  0c00              LSRS     r0,r0,#16
;;;445    }
000006  4770              BX       lr
;;;446    
                          ENDP

                  |L11.8|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;319      */
;;;320    __weak uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L12.8|
;;;321    {
;;;322      return uwTick;
000002  6880              LDR      r0,[r0,#8]  ; uwTick
;;;323    }
000004  4770              BX       lr
;;;324    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      ||.data||

                          AREA ||i.HAL_GetTickFreq||, CODE, READONLY, ALIGN=2

                  HAL_GetTickFreq PROC
;;;357      */
;;;358    HAL_TickFreqTypeDef HAL_GetTickFreq(void)
000000  4801              LDR      r0,|L13.8|
;;;359    {
;;;360      return uwTickFreq;
000002  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
;;;361    }
000004  4770              BX       lr
;;;362    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      ||.data||

                          AREA ||i.HAL_GetTickPrio||, CODE, READONLY, ALIGN=2

                  HAL_GetTickPrio PROC
;;;328      */
;;;329    uint32_t HAL_GetTickPrio(void)
000000  4801              LDR      r0,|L14.8|
;;;330    {
;;;331      return uwTickPrio;
000002  6840              LDR      r0,[r0,#4]  ; uwTickPrio
;;;332    }
000004  4770              BX       lr
;;;333    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      ||.data||

                          AREA ||i.HAL_GetUID||, CODE, READONLY, ALIGN=2

                  HAL_GetUID PROC
;;;570      */
;;;571    void HAL_GetUID(uint32_t *UID)
000000  4905              LDR      r1,|L15.24|
;;;572    {
;;;573      UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
000002  6809              LDR      r1,[r1,#0]
;;;574      UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
000004  6001              STR      r1,[r0,#0]
000006  4904              LDR      r1,|L15.24|
000008  1d09              ADDS     r1,r1,#4
00000a  6809              LDR      r1,[r1,#0]
;;;575      UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
00000c  6041              STR      r1,[r0,#4]
00000e  4902              LDR      r1,|L15.24|
000010  3108              ADDS     r1,r1,#8
000012  6809              LDR      r1,[r1,#0]
000014  6081              STR      r1,[r0,#8]
;;;576    }
000016  4770              BX       lr
;;;577    
                          ENDP

                  |L15.24|
                          DCD      0x1ffff7e8

                          AREA ||i.HAL_IncTick||, CODE, READONLY, ALIGN=2

                  HAL_IncTick PROC
;;;308      */
;;;309    __weak void HAL_IncTick(void)
000000  4802              LDR      r0,|L16.12|
;;;310    {
;;;311      uwTick += uwTickFreq;
000002  6881              LDR      r1,[r0,#8]  ; uwTick
000004  7802              LDRB     r2,[r0,#0]  ; uwTickFreq
000006  4411              ADD      r1,r1,r2
000008  6081              STR      r1,[r0,#8]  ; uwTick
;;;312    }
00000a  4770              BX       lr
;;;313    
                          ENDP

                  |L16.12|
                          DCD      ||.data||

                          AREA ||i.HAL_Init||, CODE, READONLY, ALIGN=2

                  HAL_Init PROC
;;;157      */
;;;158    HAL_StatusTypeDef HAL_Init(void)
000000  4807              LDR      r0,|L17.32|
;;;159    {
000002  b510              PUSH     {r4,lr}
;;;160      /* Configure Flash prefetch */
;;;161    #if (PREFETCH_ENABLE != 0)
;;;162    #if defined(STM32F101x6) || defined(STM32F101xB) || defined(STM32F101xE) || defined(STM32F101xG) || \
;;;163        defined(STM32F102x6) || defined(STM32F102xB) || \
;;;164        defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
;;;165        defined(STM32F105xC) || defined(STM32F107xC)
;;;166    
;;;167      /* Prefetch buffer is not available on value line devices */
;;;168      __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
000004  6801              LDR      r1,[r0,#0]
000006  f0410110          ORR      r1,r1,#0x10
00000a  6001              STR      r1,[r0,#0]
;;;169    #endif
;;;170    #endif /* PREFETCH_ENABLE */
;;;171    
;;;172      /* Set Interrupt Group Priority */
;;;173      HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       HAL_NVIC_SetPriorityGrouping
;;;174    
;;;175      /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
;;;176      HAL_InitTick(TICK_INT_PRIORITY);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       HAL_InitTick
;;;177    
;;;178      /* Init the low level hardware */
;;;179      HAL_MspInit();
000018  f7fffffe          BL       HAL_MspInit
;;;180    
;;;181      /* Return function status */
;;;182      return HAL_OK;
00001c  2000              MOVS     r0,#0
;;;183    }
00001e  bd10              POP      {r4,pc}
;;;184    
                          ENDP

                  |L17.32|
                          DCD      0x40022000

                          AREA ||i.HAL_InitTick||, CODE, READONLY, ALIGN=2

                  HAL_InitTick PROC
;;;249      */
;;;250    __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
000000  b570              PUSH     {r4-r6,lr}
;;;251    {
;;;252      /* Configure the SysTick to have interrupt in 1ms time basis*/
;;;253      if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
000002  4d0d              LDR      r5,|L18.56|
000004  4604              MOV      r4,r0                 ;251
000006  f44f717a          MOV      r1,#0x3e8
00000a  7828              LDRB     r0,[r5,#0]  ; uwTickFreq
00000c  fbb1f0f0          UDIV     r0,r1,r0
000010  490a              LDR      r1,|L18.60|
000012  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
000014  fbb1f0f0          UDIV     r0,r1,r0
000018  f7fffffe          BL       HAL_SYSTICK_Config
00001c  b948              CBNZ     r0,|L18.50|
;;;254      {
;;;255        return HAL_ERROR;
;;;256      }
;;;257    
;;;258      /* Configure the SysTick IRQ priority */
;;;259      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
00001e  2c10              CMP      r4,#0x10
000020  d207              BCS      |L18.50|
;;;260      {
;;;261        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
000022  2200              MOVS     r2,#0
000024  4621              MOV      r1,r4
000026  1e50              SUBS     r0,r2,#1
000028  f7fffffe          BL       HAL_NVIC_SetPriority
;;;262        uwTickPrio = TickPriority;
;;;263      }
;;;264      else
;;;265      {
;;;266        return HAL_ERROR;
;;;267      }
;;;268    
;;;269      /* Return function status */
;;;270      return HAL_OK;
00002c  2000              MOVS     r0,#0
00002e  606c              STR      r4,[r5,#4]            ;262  ; uwTickPrio
;;;271    }
000030  bd70              POP      {r4-r6,pc}
                  |L18.50|
000032  2001              MOVS     r0,#1                 ;266
000034  bd70              POP      {r4-r6,pc}
;;;272    
                          ENDP

000036  0000              DCW      0x0000
                  |L18.56|
                          DCD      ||.data||
                  |L18.60|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_MspDeInit PROC
;;;226      */
;;;227    __weak void HAL_MspDeInit(void)
000000  4770              BX       lr
;;;228    {
;;;229      /* NOTE : This function should not be modified, when the callback is needed,
;;;230                the HAL_MspDeInit could be implemented in the user file
;;;231       */
;;;232    }
;;;233    
                          ENDP


                          AREA ||i.HAL_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_MspInit PROC
;;;215      */
;;;216    __weak void HAL_MspInit(void)
000000  4770              BX       lr
;;;217    {
;;;218      /* NOTE : This function should not be modified, when the callback is needed,
;;;219                the HAL_MspInit could be implemented in the user file
;;;220       */
;;;221    }
;;;222    
                          ENDP


                          AREA ||i.HAL_ResumeTick||, CODE, READONLY, ALIGN=1

                  HAL_ResumeTick PROC
;;;415      */
;;;416    __weak void HAL_ResumeTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;417    {
;;;418      /* Enable SysTick Interrupt */
;;;419      SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
000004  6901              LDR      r1,[r0,#0x10]
000006  f0410102          ORR      r1,r1,#2
00000a  6101              STR      r1,[r0,#0x10]
;;;420    }
00000c  4770              BX       lr
;;;421    
                          ENDP


                          AREA ||i.HAL_SetTickFreq||, CODE, READONLY, ALIGN=2

                  HAL_SetTickFreq PROC
;;;337      */
;;;338    HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
000000  4a05              LDR      r2,|L22.24|
;;;339    {
000002  b510              PUSH     {r4,lr}
000004  4601              MOV      r1,r0
;;;340      HAL_StatusTypeDef status  = HAL_OK;
;;;341      assert_param(IS_TICKFREQ(Freq));
;;;342    
;;;343      if (uwTickFreq != Freq)
000006  7813              LDRB     r3,[r2,#0]  ; uwTickFreq
000008  2000              MOVS     r0,#0                 ;340
00000a  428b              CMP      r3,r1
00000c  d003              BEQ      |L22.22|
;;;344      {
;;;345        uwTickFreq = Freq;
00000e  7011              STRB     r1,[r2,#0]
;;;346    
;;;347        /* Apply the new tick Freq  */
;;;348        status = HAL_InitTick(uwTickPrio);
000010  6850              LDR      r0,[r2,#4]  ; uwTickPrio
000012  f7fffffe          BL       HAL_InitTick
                  |L22.22|
;;;349      }
;;;350    
;;;351      return status;
;;;352    }
000016  bd10              POP      {r4,pc}
;;;353    
                          ENDP

                  |L22.24|
                          DCD      ||.data||

                          AREA ||i.HAL_SuspendTick||, CODE, READONLY, ALIGN=1

                  HAL_SuspendTick PROC
;;;399      */
;;;400    __weak void HAL_SuspendTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;401    {
;;;402      /* Disable SysTick Interrupt */
;;;403      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
000004  6901              LDR      r1,[r0,#0x10]
000006  f0210102          BIC      r1,r1,#2
00000a  6101              STR      r1,[r0,#0x10]
;;;404    }
00000c  4770              BX       lr
;;;405    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  uwTickFreq
000000  01000000          DCB      0x01,0x00,0x00,0x00
                  uwTickPrio
                          DCD      0x00000010
                  uwTick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_3da258af____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___15_stm32f1xx_hal_c_3da258af____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_3da258af____REVSH|
#line 402
|__asm___15_stm32f1xx_hal_c_3da258af____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_3da258af____RRX|
#line 587
|__asm___15_stm32f1xx_hal_c_3da258af____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
