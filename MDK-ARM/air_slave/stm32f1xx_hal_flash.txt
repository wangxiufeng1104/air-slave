; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f1xx_hal_flash.o --asm_dir=.\air_slave\ --list_dir=.\air_slave\ --depend=.\stm32f1xx_hal_flash.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_air_slave -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\stm32f1xx_hal_flash.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;812      */
;;;813    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  4b04              LDR      r3,|L1.20|
;;;814    {
;;;815      /* Clean the error context */
;;;816      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  2200              MOVS     r2,#0
000004  61da              STR      r2,[r3,#0x1c]  ; pFlash
;;;817      
;;;818    #if defined(FLASH_BANK2_END)
;;;819      if(Address <= FLASH_BANK1_END)
;;;820      {
;;;821    #endif /* FLASH_BANK2_END */
;;;822        /* Proceed to program the new data */
;;;823        SET_BIT(FLASH->CR, FLASH_CR_PG);
000006  4a04              LDR      r2,|L1.24|
000008  6913              LDR      r3,[r2,#0x10]
00000a  f0430301          ORR      r3,r3,#1
00000e  6113              STR      r3,[r2,#0x10]
;;;824    #if defined(FLASH_BANK2_END)
;;;825      }
;;;826      else
;;;827      {
;;;828        /* Proceed to program the new data */
;;;829        SET_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;830      }
;;;831    #endif /* FLASH_BANK2_END */
;;;832    
;;;833      /* Write data in the address */
;;;834      *(__IO uint16_t*)Address = Data;
000010  8001              STRH     r1,[r0,#0]
;;;835    }
000012  4770              BX       lr
;;;836    
                          ENDP

                  |L1.20|
                          DCD      ||.bss||
                  |L1.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;929      */
;;;930    static void FLASH_SetErrorCode(void)
000000  4814              LDR      r0,|L2.84|
;;;931    {
;;;932      uint32_t flags = 0U;
000002  2200              MOVS     r2,#0
;;;933      
;;;934    #if defined(FLASH_BANK2_END)
;;;935      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
;;;936    #else
;;;937      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
000004  68c1              LDR      r1,[r0,#0xc]
000006  06cb              LSLS     r3,r1,#27
;;;938    #endif /* FLASH_BANK2_END */
;;;939      {
;;;940        pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
000008  4913              LDR      r1,|L2.88|
00000a  d504              BPL      |L2.22|
00000c  69ca              LDR      r2,[r1,#0x1c]  ; pFlash
00000e  f0420202          ORR      r2,r2,#2
000012  61ca              STR      r2,[r1,#0x1c]  ; pFlash
;;;941    #if defined(FLASH_BANK2_END)
;;;942        flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
;;;943    #else
;;;944        flags |= FLASH_FLAG_WRPERR;
000014  2210              MOVS     r2,#0x10
                  |L2.22|
;;;945    #endif /* FLASH_BANK2_END */
;;;946      }
;;;947    #if defined(FLASH_BANK2_END)
;;;948      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
;;;949    #else
;;;950      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000016  68c3              LDR      r3,[r0,#0xc]
000018  075b              LSLS     r3,r3,#29
00001a  d505              BPL      |L2.40|
;;;951    #endif /* FLASH_BANK2_END */
;;;952      {
;;;953        pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
00001c  69cb              LDR      r3,[r1,#0x1c]  ; pFlash
00001e  f0430301          ORR      r3,r3,#1
000022  61cb              STR      r3,[r1,#0x1c]  ; pFlash
;;;954    #if defined(FLASH_BANK2_END)
;;;955        flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
;;;956    #else
;;;957        flags |= FLASH_FLAG_PGERR;
000024  f0420204          ORR      r2,r2,#4
                  |L2.40|
;;;958    #endif /* FLASH_BANK2_END */
;;;959      }
;;;960      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
000028  69c3              LDR      r3,[r0,#0x1c]
00002a  07db              LSLS     r3,r3,#31
00002c  d007              BEQ      |L2.62|
;;;961      {
;;;962        pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
00002e  69cb              LDR      r3,[r1,#0x1c]  ; pFlash
000030  f0430304          ORR      r3,r3,#4
000034  61cb              STR      r3,[r1,#0x1c]  ; pFlash
;;;963      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
000036  69c1              LDR      r1,[r0,#0x1c]
000038  f0210101          BIC      r1,r1,#1
00003c  61c1              STR      r1,[r0,#0x1c]
                  |L2.62|
;;;964      }
;;;965    
;;;966      /* Clear FLASH error pending bits */
;;;967      __HAL_FLASH_CLEAR_FLAG(flags);
00003e  f5a27180          SUB      r1,r2,#0x100
000042  3901              SUBS     r1,#1
000044  d001              BEQ      |L2.74|
000046  60c2              STR      r2,[r0,#0xc]
;;;968    }  
000048  4770              BX       lr
                  |L2.74|
00004a  69c1              LDR      r1,[r0,#0x1c]         ;967
00004c  f0210101          BIC      r1,r1,#1              ;967
000050  61c1              STR      r1,[r0,#0x1c]         ;967
000052  4770              BX       lr
;;;969    /**
                          ENDP

                  |L2.84|
                          DCD      0x40022000
                  |L2.88|
                          DCD      ||.bss||

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;841      */
;;;842    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;843    {
000002  4605              MOV      r5,r0
;;;844      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;845         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;846         flag will be set */
;;;847         
;;;848      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4606              MOV      r6,r0
;;;849         
;;;850      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
00000a  4c11              LDR      r4,|L3.80|
00000c  e009              B        |L3.34|
                  |L3.14|
;;;851      { 
;;;852        if (Timeout != HAL_MAX_DELAY)
00000e  1c68              ADDS     r0,r5,#1
000010  d007              BEQ      |L3.34|
;;;853        {
;;;854          if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
000012  b125              CBZ      r5,|L3.30|
000014  f7fffffe          BL       HAL_GetTick
000018  1b80              SUBS     r0,r0,r6
00001a  42a8              CMP      r0,r5
00001c  d901              BLS      |L3.34|
                  |L3.30|
;;;855          {
;;;856            return HAL_TIMEOUT;
00001e  2003              MOVS     r0,#3
;;;857          }
;;;858        }
;;;859      }
;;;860      
;;;861      /* Check FLASH End of Operation flag  */
;;;862      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
;;;863      {
;;;864        /* Clear FLASH End of Operation pending bit */
;;;865        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;866      }
;;;867      
;;;868      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
;;;869         __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
;;;870         __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
;;;871      {
;;;872        /*Save the error code*/
;;;873        FLASH_SetErrorCode();
;;;874        return HAL_ERROR;
;;;875      }
;;;876    
;;;877      /* There is no error flag set */
;;;878      return HAL_OK;
;;;879    }
000020  bd70              POP      {r4-r6,pc}
                  |L3.34|
000022  68e0              LDR      r0,[r4,#0xc]          ;850
000024  07c0              LSLS     r0,r0,#31             ;850
000026  d1f2              BNE      |L3.14|
000028  68e0              LDR      r0,[r4,#0xc]          ;862
00002a  0680              LSLS     r0,r0,#26             ;862
00002c  d501              BPL      |L3.50|
00002e  2020              MOVS     r0,#0x20              ;865
000030  60e0              STR      r0,[r4,#0xc]          ;865
                  |L3.50|
000032  68e0              LDR      r0,[r4,#0xc]          ;868
000034  06c0              LSLS     r0,r0,#27             ;868
000036  d405              BMI      |L3.68|
000038  69e0              LDR      r0,[r4,#0x1c]         ;869
00003a  07c0              LSLS     r0,r0,#31             ;869
00003c  d102              BNE      |L3.68|
00003e  68e0              LDR      r0,[r4,#0xc]          ;870
000040  0740              LSLS     r0,r0,#29             ;870
000042  d503              BPL      |L3.76|
                  |L3.68|
000044  f7fffffe          BL       FLASH_SetErrorCode
000048  2001              MOVS     r0,#1                 ;874
00004a  bd70              POP      {r4-r6,pc}
                  |L3.76|
00004c  2000              MOVS     r0,#0                 ;878
00004e  bd70              POP      {r4-r6,pc}
;;;880    
                          ENDP

                  |L3.80|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;621      */
;;;622    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;623    {
;;;624      /* Prevent unused argument(s) compilation warning */
;;;625      UNUSED(ReturnValue);
;;;626    
;;;627      /* NOTE : This function Should not be modified, when the callback is needed,
;;;628                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;629       */ 
;;;630    }
;;;631    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;789      */
;;;790    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L5.8|
;;;791    {
;;;792       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;793    }
000004  4770              BX       lr
;;;794    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;347      */
;;;348    void HAL_FLASH_IRQHandler(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;349    {
;;;350      uint32_t addresstmp = 0U;
;;;351      
;;;352      /* Check FLASH operation error flags */
;;;353    #if defined(FLASH_BANK2_END)
;;;354      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
;;;355        (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
;;;356    #else
;;;357      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000004  4d3e              LDR      r5,|L6.256|
000006  68e8              LDR      r0,[r5,#0xc]
;;;358    #endif /* FLASH_BANK2_END */
;;;359      {
;;;360        /* Return the faulty address */
;;;361        addresstmp = pFlash.Address;
000008  4c3e              LDR      r4,|L6.260|
00000a  06c0              LSLS     r0,r0,#27             ;357
;;;362        /* Reset address */
;;;363        pFlash.Address = 0xFFFFFFFFU;
00000c  f04f37ff          MOV      r7,#0xffffffff
000010  f04f0600          MOV      r6,#0
000014  d402              BMI      |L6.28|
000016  68e8              LDR      r0,[r5,#0xc]          ;357
000018  0740              LSLS     r0,r0,#29             ;357
00001a  d508              BPL      |L6.46|
                  |L6.28|
00001c  f8d48008          LDR      r8,[r4,#8]            ;361  ; pFlash
000020  60a7              STR      r7,[r4,#8]  ; pFlash
;;;364      
;;;365        /* Save the Error code */
;;;366        FLASH_SetErrorCode();
000022  f7fffffe          BL       FLASH_SetErrorCode
;;;367        
;;;368        /* FLASH error interrupt user callback */
;;;369        HAL_FLASH_OperationErrorCallback(addresstmp);
000026  4640              MOV      r0,r8
000028  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;370    
;;;371        /* Stop the procedure ongoing */
;;;372        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00002c  7026              STRB     r6,[r4,#0]
                  |L6.46|
;;;373      }
;;;374    
;;;375      /* Check FLASH End of Operation flag  */
;;;376    #if defined(FLASH_BANK2_END)
;;;377      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
;;;378      {
;;;379        /* Clear FLASH End of Operation pending bit */
;;;380        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
;;;381    #else
;;;382      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
00002e  68e8              LDR      r0,[r5,#0xc]
000030  0680              LSLS     r0,r0,#26
000032  d553              BPL      |L6.220|
;;;383      {
;;;384        /* Clear FLASH End of Operation pending bit */
;;;385        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000034  2020              MOVS     r0,#0x20
000036  60e8              STR      r0,[r5,#0xc]
;;;386    #endif /* FLASH_BANK2_END */
;;;387        
;;;388        /* Process can continue only if no error detected */
;;;389        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
000038  7820              LDRB     r0,[r4,#0]  ; pFlash
00003a  b1f8              CBZ      r0,|L6.124|
;;;390        {
;;;391          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
00003c  7820              LDRB     r0,[r4,#0]  ; pFlash
00003e  2801              CMP      r0,#1
000040  d01d              BEQ      |L6.126|
;;;392          {
;;;393            /* Nb of pages to erased can be decreased */
;;;394            pFlash.DataRemaining--;
;;;395    
;;;396            /* Check if there are still pages to erase */
;;;397            if(pFlash.DataRemaining != 0U)
;;;398            {
;;;399              addresstmp = pFlash.Address;
;;;400              /*Indicate user which sector has been erased */
;;;401              HAL_FLASH_EndOfOperationCallback(addresstmp);
;;;402    
;;;403              /*Increment sector number*/
;;;404              addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
;;;405              pFlash.Address = addresstmp;
;;;406    
;;;407              /* If the erase operation is completed, disable the PER Bit */
;;;408              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;409    
;;;410              FLASH_PageErase(addresstmp);
;;;411            }
;;;412            else
;;;413            {
;;;414              /* No more pages to Erase, user callback can be called. */
;;;415              /* Reset Sector and stop Erase pages procedure */
;;;416              pFlash.Address = addresstmp = 0xFFFFFFFFU;
;;;417              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;418              /* FLASH EOP interrupt user callback */
;;;419              HAL_FLASH_EndOfOperationCallback(addresstmp);
;;;420            }
;;;421          }
;;;422          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
000042  7820              LDRB     r0,[r4,#0]  ; pFlash
000044  2802              CMP      r0,#2
000046  d033              BEQ      |L6.176|
;;;423          {
;;;424            /* Operation is completed, disable the MER Bit */
;;;425            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;426    
;;;427    #if defined(FLASH_BANK2_END)
;;;428            /* Stop Mass Erase procedure if no pending mass erase on other bank */
;;;429            if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
;;;430            {
;;;431    #endif /* FLASH_BANK2_END */
;;;432              /* MassErase ended. Return the selected bank */
;;;433              /* FLASH EOP interrupt user callback */
;;;434              HAL_FLASH_EndOfOperationCallback(0U);
;;;435    
;;;436              /* Stop Mass Erase procedure*/
;;;437              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;438            }
;;;439    #if defined(FLASH_BANK2_END)
;;;440          }
;;;441    #endif /* FLASH_BANK2_END */
;;;442          else
;;;443          {
;;;444            /* Nb of 16-bit data to program can be decreased */
;;;445            pFlash.DataRemaining--;
000048  6860              LDR      r0,[r4,#4]  ; pFlash
00004a  1e40              SUBS     r0,r0,#1
00004c  6060              STR      r0,[r4,#4]  ; pFlash
;;;446            
;;;447            /* Check if there are still 16-bit data to program */
;;;448            if(pFlash.DataRemaining != 0U)
00004e  6860              LDR      r0,[r4,#4]  ; pFlash
000050  b3b0              CBZ      r0,|L6.192|
;;;449            {
;;;450              /* Increment address to 16-bit */
;;;451              pFlash.Address += 2U;
000052  68a0              LDR      r0,[r4,#8]  ; pFlash
000054  1c80              ADDS     r0,r0,#2
000056  60a0              STR      r0,[r4,#8]  ; pFlash
;;;452              addresstmp = pFlash.Address;
000058  68a0              LDR      r0,[r4,#8]  ; pFlash
;;;453              
;;;454              /* Shift to have next 16-bit data */
;;;455              pFlash.Data = (pFlash.Data >> 16U);
00005a  6921              LDR      r1,[r4,#0x10]  ; pFlash
00005c  6962              LDR      r2,[r4,#0x14]  ; pFlash
00005e  0c09              LSRS     r1,r1,#16
000060  ea414102          ORR      r1,r1,r2,LSL #16
000064  0c12              LSRS     r2,r2,#16
000066  6121              STR      r1,[r4,#0x10]  ; pFlash
000068  6162              STR      r2,[r4,#0x14]  ; pFlash
;;;456              
;;;457              /* Operation is completed, disable the PG Bit */
;;;458              CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
00006a  6929              LDR      r1,[r5,#0x10]
00006c  f0210101          BIC      r1,r1,#1
000070  6129              STR      r1,[r5,#0x10]
;;;459    
;;;460              /*Program halfword (16-bit) at a specified address.*/
;;;461              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
000072  6921              LDR      r1,[r4,#0x10]  ; pFlash
000074  6962              LDR      r2,[r4,#0x14]  ; pFlash
000076  b289              UXTH     r1,r1
000078  f7fffffe          BL       FLASH_Program_HalfWord
                  |L6.124|
00007c  e02e              B        |L6.220|
                  |L6.126|
00007e  6860              LDR      r0,[r4,#4]            ;394  ; pFlash
000080  1e40              SUBS     r0,r0,#1              ;394
000082  6060              STR      r0,[r4,#4]            ;394  ; pFlash
000084  6860              LDR      r0,[r4,#4]            ;397  ; pFlash
000086  b168              CBZ      r0,|L6.164|
000088  68a0              LDR      r0,[r4,#8]            ;399  ; pFlash
00008a  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
00008e  68a0              LDR      r0,[r4,#8]            ;404  ; pFlash
000090  f5006080          ADD      r0,r0,#0x400          ;404
000094  60a0              STR      r0,[r4,#8]            ;405  ; pFlash
000096  6929              LDR      r1,[r5,#0x10]         ;408
000098  f0210102          BIC      r1,r1,#2              ;408
00009c  6129              STR      r1,[r5,#0x10]         ;408
00009e  f7fffffe          BL       FLASH_PageErase
0000a2  e01b              B        |L6.220|
                  |L6.164|
0000a4  4638              MOV      r0,r7                 ;416
0000a6  60a7              STR      r7,[r4,#8]            ;416  ; pFlash
0000a8  7026              STRB     r6,[r4,#0]            ;417
0000aa  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000ae  e015              B        |L6.220|
                  |L6.176|
0000b0  6928              LDR      r0,[r5,#0x10]         ;425
0000b2  f0200004          BIC      r0,r0,#4              ;425
0000b6  6128              STR      r0,[r5,#0x10]         ;425
0000b8  2000              MOVS     r0,#0                 ;434
0000ba  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000be  e00c              B        |L6.218|
                  |L6.192|
0000c0  e7ff              B        |L6.194|
                  |L6.194|
;;;462            }
;;;463            else
;;;464            {
;;;465              /* Program ended. Return the selected address */
;;;466              /* FLASH EOP interrupt user callback */
;;;467              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
0000c2  7820              LDRB     r0,[r4,#0]  ; pFlash
0000c4  2803              CMP      r0,#3
0000c6  d017              BEQ      |L6.248|
;;;468              {
;;;469                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;470              }
;;;471              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
0000c8  7820              LDRB     r0,[r4,#0]  ; pFlash
0000ca  2804              CMP      r0,#4
;;;472              {
;;;473                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
;;;474              }
;;;475              else 
;;;476              {
;;;477                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
0000cc  68a0              LDR      r0,[r4,#8]  ; pFlash
0000ce  d015              BEQ      |L6.252|
0000d0  f1b00006          SUBS.W   r0,r0,#6              ;471
                  |L6.212|
0000d4  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;478              }
;;;479            
;;;480              /* Reset Address and stop Program procedure */
;;;481              pFlash.Address = 0xFFFFFFFFU;
0000d8  60a7              STR      r7,[r4,#8]  ; pFlash
                  |L6.218|
;;;482              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000da  7026              STRB     r6,[r4,#0]
                  |L6.220|
;;;483            }
;;;484          }
;;;485        }
;;;486      }
;;;487      
;;;488    #if defined(FLASH_BANK2_END)
;;;489      /* Check FLASH End of Operation flag  */
;;;490      if(__HAL_FLASH_GET_FLAG( FLASH_FLAG_EOP_BANK2))
;;;491      {
;;;492        /* Clear FLASH End of Operation pending bit */
;;;493        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
;;;494        
;;;495        /* Process can continue only if no error detected */
;;;496        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;497        {
;;;498          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
;;;499          {
;;;500            /* Nb of pages to erased can be decreased */
;;;501            pFlash.DataRemaining--;
;;;502            
;;;503            /* Check if there are still pages to erase*/
;;;504            if(pFlash.DataRemaining != 0U)
;;;505            {
;;;506              /* Indicate user which page address has been erased*/
;;;507              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;508            
;;;509              /* Increment page address to next page */
;;;510              pFlash.Address += FLASH_PAGE_SIZE;
;;;511              addresstmp = pFlash.Address;
;;;512    
;;;513              /* Operation is completed, disable the PER Bit */
;;;514              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;515    
;;;516              FLASH_PageErase(addresstmp);
;;;517            }
;;;518            else
;;;519            {
;;;520              /*No more pages to Erase*/
;;;521              
;;;522              /*Reset Address and stop Erase pages procedure*/
;;;523              pFlash.Address = 0xFFFFFFFFU;
;;;524              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;525    
;;;526              /* FLASH EOP interrupt user callback */
;;;527              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;528            }
;;;529          }
;;;530          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
;;;531          {
;;;532            /* Operation is completed, disable the MER Bit */
;;;533            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;534    
;;;535            if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_MER))
;;;536            {
;;;537              /* MassErase ended. Return the selected bank*/
;;;538              /* FLASH EOP interrupt user callback */
;;;539              HAL_FLASH_EndOfOperationCallback(0U);
;;;540            
;;;541              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;542            }
;;;543          }
;;;544          else
;;;545          {
;;;546            /* Nb of 16-bit data to program can be decreased */
;;;547            pFlash.DataRemaining--;
;;;548            
;;;549            /* Check if there are still 16-bit data to program */
;;;550            if(pFlash.DataRemaining != 0U)
;;;551            {
;;;552              /* Increment address to 16-bit */
;;;553              pFlash.Address += 2U;
;;;554              addresstmp = pFlash.Address;
;;;555              
;;;556              /* Shift to have next 16-bit data */
;;;557              pFlash.Data = (pFlash.Data >> 16U);
;;;558              
;;;559              /* Operation is completed, disable the PG Bit */
;;;560              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;561    
;;;562              /*Program halfword (16-bit) at a specified address.*/
;;;563              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
;;;564            }
;;;565            else
;;;566            {
;;;567              /*Program ended. Return the selected address*/
;;;568              /* FLASH EOP interrupt user callback */
;;;569              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
;;;570              {
;;;571                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;572              }
;;;573              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
;;;574              {
;;;575                HAL_FLASH_EndOfOperationCallback(pFlash.Address-2U);
;;;576              }
;;;577              else 
;;;578              {
;;;579                HAL_FLASH_EndOfOperationCallback(pFlash.Address-6U);
;;;580              }
;;;581              
;;;582              /* Reset Address and stop Program procedure*/
;;;583              pFlash.Address = 0xFFFFFFFFU;
;;;584              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;585            }
;;;586          }
;;;587        }
;;;588      }
;;;589    #endif 
;;;590    
;;;591      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
0000dc  7820              LDRB     r0,[r4,#0]  ; pFlash
0000de  2800              CMP      r0,#0
0000e0  d108              BNE      |L6.244|
;;;592      {
;;;593    #if defined(FLASH_BANK2_END)
;;;594        /* Operation is completed, disable the PG, PER and MER Bits for both bank */
;;;595        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
;;;596        CLEAR_BIT(FLASH->CR2, (FLASH_CR2_PG | FLASH_CR2_PER | FLASH_CR2_MER));  
;;;597      
;;;598        /* Disable End of FLASH Operation and Error source interrupts for both banks */
;;;599        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;600    #else
;;;601        /* Operation is completed, disable the PG, PER and MER Bits */
;;;602        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
0000e2  6928              LDR      r0,[r5,#0x10]
0000e4  f0200007          BIC      r0,r0,#7
0000e8  6128              STR      r0,[r5,#0x10]
;;;603    
;;;604        /* Disable End of FLASH Operation and Error source interrupts */
;;;605        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
0000ea  6928              LDR      r0,[r5,#0x10]
0000ec  f42050a0          BIC      r0,r0,#0x1400
0000f0  6128              STR      r0,[r5,#0x10]
;;;606    #endif /* FLASH_BANK2_END */
;;;607    
;;;608        /* Process Unlocked */
;;;609        __HAL_UNLOCK(&pFlash);
0000f2  7626              STRB     r6,[r4,#0x18]
                  |L6.244|
;;;610      }
;;;611    }
0000f4  e8bd81f0          POP      {r4-r8,pc}
                  |L6.248|
0000f8  68a0              LDR      r0,[r4,#8]            ;469  ; pFlash
0000fa  e7eb              B        |L6.212|
                  |L6.252|
0000fc  1e80              SUBS     r0,r0,#2              ;469
0000fe  e7e9              B        |L6.212|
;;;612    
                          ENDP

                  |L6.256|
                          DCD      0x40022000
                  |L6.260|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;710      */
;;;711    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L7.16|
;;;712    {
;;;713      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;714      SET_BIT(FLASH->CR, FLASH_CR_LOCK);
000002  6901              LDR      r1,[r0,#0x10]
000004  f0410180          ORR      r1,r1,#0x80
000008  6101              STR      r1,[r0,#0x10]
;;;715      
;;;716    #if defined(FLASH_BANK2_END)
;;;717      /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
;;;718      SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
;;;719    
;;;720    #endif /* FLASH_BANK2_END */
;;;721      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;722    }
00000c  4770              BX       lr
;;;723    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OB_Launch PROC
;;;760      */
;;;761    void HAL_FLASH_OB_Launch(void)
000000  f7ffbffe          B.W      HAL_NVIC_SystemReset
;;;762    {
;;;763      /* Initiates a system reset request to launch the option byte loading */
;;;764      HAL_NVIC_SystemReset();
;;;765    }
;;;766    
                          ENDP


                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;747      */
;;;748    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L9.16|
;;;749    {
;;;750      /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
;;;751      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
000002  6901              LDR      r1,[r0,#0x10]
000004  f4217100          BIC      r1,r1,#0x200
000008  6101              STR      r1,[r0,#0x10]
;;;752      
;;;753      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;754    }
00000c  4770              BX       lr
;;;755      
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;727      */
;;;728    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4805              LDR      r0,|L10.24|
;;;729    {
;;;730      if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
000002  6901              LDR      r1,[r0,#0x10]
000004  0589              LSLS     r1,r1,#22
000006  d405              BMI      |L10.20|
;;;731      {
;;;732        /* Authorizes the Option Byte register programming */
;;;733        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
000008  4904              LDR      r1,|L10.28|
00000a  6081              STR      r1,[r0,#8]
;;;734        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
00000c  4904              LDR      r1,|L10.32|
00000e  6081              STR      r1,[r0,#8]
;;;735      }
;;;736      else
;;;737      {
;;;738        return HAL_ERROR;
;;;739      }  
;;;740      
;;;741      return HAL_OK;  
000010  2000              MOVS     r0,#0
;;;742    }
000012  4770              BX       lr
                  |L10.20|
000014  2001              MOVS     r0,#1                 ;738
000016  4770              BX       lr
;;;743    
                          ENDP

                  |L10.24|
                          DCD      0x40022000
                  |L10.28|
                          DCD      0x45670123
                  |L10.32|
                          DCD      0xcdef89ab

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;639      */
;;;640    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;641    {
;;;642      /* Prevent unused argument(s) compilation warning */
;;;643      UNUSED(ReturnValue);
;;;644    
;;;645      /* NOTE : This function Should not be modified, when the callback is needed,
;;;646                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;647       */ 
;;;648    }
;;;649    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;183      */
;;;184    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;185    {
000004  4607              MOV      r7,r0
;;;186      HAL_StatusTypeDef status = HAL_ERROR;
;;;187      uint8_t index = 0;
;;;188      uint8_t nbiterations = 0;
;;;189      
;;;190      /* Process Locked */
;;;191      __HAL_LOCK(&pFlash);
000006  481c              LDR      r0,|L12.120|
000008  4688              MOV      r8,r1                 ;185
00000a  2400              MOVS     r4,#0                 ;187
00000c  7e01              LDRB     r1,[r0,#0x18]  ; pFlash
00000e  4615              MOV      r5,r2                 ;185
000010  461e              MOV      r6,r3                 ;185
000012  2901              CMP      r1,#1
000014  d009              BEQ      |L12.42|
000016  2101              MOVS     r1,#1
000018  4681              MOV      r9,r0
00001a  7601              STRB     r1,[r0,#0x18]
;;;192    
;;;193      /* Check the parameters */
;;;194      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;195      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;196    
;;;197    #if defined(FLASH_BANK2_END)
;;;198      if(Address <= FLASH_BANK1_END)
;;;199      {
;;;200    #endif /* FLASH_BANK2_END */
;;;201        /* Wait for last operation to be completed */
;;;202        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
00001c  f24c3a50          MOV      r10,#0xc350
000020  4650              MOV      r0,r10
000022  f7fffffe          BL       FLASH_WaitForLastOperation
000026  b118              CBZ      r0,|L12.48|
000028  e022              B        |L12.112|
                  |L12.42|
00002a  2002              MOVS     r0,#2                 ;191
                  |L12.44|
;;;203    #if defined(FLASH_BANK2_END)
;;;204      }
;;;205      else
;;;206      {
;;;207        /* Wait for last operation to be completed */
;;;208        status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
;;;209      }
;;;210    #endif /* FLASH_BANK2_END */
;;;211      
;;;212      if(status == HAL_OK)
;;;213      {
;;;214        if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;215        {
;;;216          /* Program halfword (16-bit) at a specified address. */
;;;217          nbiterations = 1U;
;;;218        }
;;;219        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;220        {
;;;221          /* Program word (32-bit = 2*16-bit) at a specified address. */
;;;222          nbiterations = 2U;
;;;223        }
;;;224        else
;;;225        {
;;;226          /* Program double word (64-bit = 4*16-bit) at a specified address. */
;;;227          nbiterations = 4U;
;;;228        }
;;;229    
;;;230        for (index = 0U; index < nbiterations; index++)
;;;231        {
;;;232          FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
;;;233    
;;;234    #if defined(FLASH_BANK2_END)
;;;235          if(Address <= FLASH_BANK1_END)
;;;236          {
;;;237    #endif /* FLASH_BANK2_END */
;;;238            /* Wait for last operation to be completed */
;;;239            status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
;;;240        
;;;241            /* If the program operation is completed, disable the PG Bit */
;;;242            CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
;;;243    #if defined(FLASH_BANK2_END)
;;;244          }
;;;245          else
;;;246          {
;;;247            /* Wait for last operation to be completed */
;;;248            status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
;;;249            
;;;250            /* If the program operation is completed, disable the PG Bit */
;;;251            CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;252          }
;;;253    #endif /* FLASH_BANK2_END */
;;;254          /* In case of error, stop programation procedure */
;;;255          if (status != HAL_OK)
;;;256          {
;;;257            break;
;;;258          }
;;;259        }
;;;260      }
;;;261    
;;;262      /* Process Unlocked */
;;;263      __HAL_UNLOCK(&pFlash);
;;;264    
;;;265      return status;
;;;266    }
00002c  e8bd9ff0          POP      {r4-r12,pc}
                  |L12.48|
000030  2f01              CMP      r7,#1                 ;214
000032  d002              BEQ      |L12.58|
000034  2f02              CMP      r7,#2                 ;219
000036  d000              BEQ      |L12.58|
000038  2704              MOVS     r7,#4                 ;227
                  |L12.58|
00003a  46d3              MOV      r11,r10               ;202
00003c  f8dfa03c          LDR      r10,|L12.124|
                  |L12.64|
000040  0122              LSLS     r2,r4,#4              ;242
000042  4628              MOV      r0,r5                 ;232
000044  4631              MOV      r1,r6                 ;232
000046  f7fffffe          BL       __aeabi_llsr
00004a  b281              UXTH     r1,r0                 ;232
00004c  eb080044          ADD      r0,r8,r4,LSL #1       ;232
000050  f7fffffe          BL       FLASH_Program_HalfWord
000054  4658              MOV      r0,r11                ;239
000056  f7fffffe          BL       FLASH_WaitForLastOperation
00005a  f8da2010          LDR      r2,[r10,#0x10]        ;242
00005e  f0220201          BIC      r2,r2,#1              ;242
000062  f8ca2010          STR      r2,[r10,#0x10]        ;242
000066  b918              CBNZ     r0,|L12.112|
000068  1c64              ADDS     r4,r4,#1              ;255
00006a  b2e4              UXTB     r4,r4                 ;230
00006c  42bc              CMP      r4,r7                 ;230
00006e  d3e7              BCC      |L12.64|
                  |L12.112|
000070  2200              MOVS     r2,#0                 ;263
000072  f8892018          STRB     r2,[r9,#0x18]         ;263
000076  e7d9              B        |L12.44|
;;;267    
                          ENDP

                  |L12.120|
                          DCD      ||.bss||
                  |L12.124|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;282      */
;;;283    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;284    {
000004  460d              MOV      r5,r1
000006  4601              MOV      r1,r0
;;;285      HAL_StatusTypeDef status = HAL_OK;
;;;286      
;;;287      /* Process Locked */
;;;288      __HAL_LOCK(&pFlash);
000008  4814              LDR      r0,|L13.92|
00000a  2400              MOVS     r4,#0                 ;285
00000c  7e06              LDRB     r6,[r0,#0x18]  ; pFlash
00000e  2e01              CMP      r6,#1
000010  d01a              BEQ      |L13.72|
;;;289    
;;;290      /* Check the parameters */
;;;291      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;292      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;293    
;;;294    #if defined(FLASH_BANK2_END)
;;;295      /* If procedure already ongoing, reject the next one */
;;;296      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;297      {
;;;298        return HAL_ERROR;
;;;299      }
;;;300      
;;;301      if(Address <= FLASH_BANK1_END)
;;;302      {
;;;303        /* Enable End of FLASH Operation and Error source interrupts */
;;;304        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1);
;;;305    
;;;306      }else
;;;307      {
;;;308        /* Enable End of FLASH Operation and Error source interrupts */
;;;309        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;310      }
;;;311    #else
;;;312      /* Enable End of FLASH Operation and Error source interrupts */
;;;313      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
000012  4f13              LDR      r7,|L13.96|
000014  2601              MOVS     r6,#1                 ;288
000016  7606              STRB     r6,[r0,#0x18]         ;288
000018  f8d7c010          LDR      r12,[r7,#0x10]
00001c  f44c5ca0          ORR      r12,r12,#0x1400
000020  f8c7c010          STR      r12,[r7,#0x10]
;;;314    #endif /* FLASH_BANK2_END */
;;;315      
;;;316      pFlash.Address = Address;
000024  6085              STR      r5,[r0,#8]  ; pFlash
;;;317      pFlash.Data = Data;
000026  6102              STR      r2,[r0,#0x10]  ; pFlash
000028  6143              STR      r3,[r0,#0x14]  ; pFlash
;;;318    
;;;319      if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
00002a  2901              CMP      r1,#1
00002c  d00e              BEQ      |L13.76|
;;;320      {
;;;321        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
;;;322        /* Program halfword (16-bit) at a specified address. */
;;;323        pFlash.DataRemaining = 1U;
;;;324      }
;;;325      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;326      {
;;;327        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
00002e  2304              MOVS     r3,#4
000030  2902              CMP      r1,#2                 ;325
000032  d00f              BEQ      |L13.84|
;;;328        /* Program word (32-bit : 2*16-bit) at a specified address. */
;;;329        pFlash.DataRemaining = 2U;
;;;330      }
;;;331      else
;;;332      {
;;;333        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
000034  2105              MOVS     r1,#5
000036  7001              STRB     r1,[r0,#0]
;;;334        /* Program double word (64-bit : 4*16-bit) at a specified address. */
;;;335        pFlash.DataRemaining = 4U;
000038  6043              STR      r3,[r0,#4]  ; pFlash
                  |L13.58|
;;;336      }
;;;337    
;;;338      /* Program halfword (16-bit) at a specified address. */
;;;339      FLASH_Program_HalfWord(Address, (uint16_t)Data);
00003a  b291              UXTH     r1,r2
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       FLASH_Program_HalfWord
;;;340    
;;;341      return status;
000042  4620              MOV      r0,r4
                  |L13.68|
;;;342    }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L13.72|
000048  2002              MOVS     r0,#2                 ;288
00004a  e7fb              B        |L13.68|
                  |L13.76|
00004c  2103              MOVS     r1,#3                 ;321
00004e  7001              STRB     r1,[r0,#0]            ;321
000050  6046              STR      r6,[r0,#4]            ;323  ; pFlash
000052  e7f2              B        |L13.58|
                  |L13.84|
000054  7003              STRB     r3,[r0,#0]            ;327
000056  2102              MOVS     r1,#2                 ;329
000058  6041              STR      r1,[r0,#4]            ;329  ; pFlash
00005a  e7ee              B        |L13.58|
;;;343    
                          ENDP

                  |L13.92|
                          DCD      ||.bss||
                  |L13.96|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;672      */
;;;673    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  4906              LDR      r1,|L14.28|
;;;674    {
;;;675      HAL_StatusTypeDef status = HAL_OK;
000002  2000              MOVS     r0,#0
;;;676    
;;;677      if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000004  690a              LDR      r2,[r1,#0x10]
000006  0612              LSLS     r2,r2,#24
000008  d507              BPL      |L14.26|
;;;678      {
;;;679        /* Authorize the FLASH Registers access */
;;;680        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
00000a  4a05              LDR      r2,|L14.32|
00000c  604a              STR      r2,[r1,#4]
;;;681        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
00000e  4a05              LDR      r2,|L14.36|
000010  604a              STR      r2,[r1,#4]
;;;682    
;;;683        /* Verify Flash is unlocked */
;;;684        if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000012  6909              LDR      r1,[r1,#0x10]
000014  0609              LSLS     r1,r1,#24
000016  d500              BPL      |L14.26|
;;;685        {
;;;686          status = HAL_ERROR;
000018  2001              MOVS     r0,#1
                  |L14.26|
;;;687        }
;;;688      }
;;;689    #if defined(FLASH_BANK2_END)
;;;690      if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
;;;691      {
;;;692        /* Authorize the FLASH BANK2 Registers access */
;;;693        WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
;;;694        WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
;;;695        
;;;696        /* Verify Flash BANK2 is unlocked */
;;;697        if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
;;;698        {
;;;699          status = HAL_ERROR;
;;;700        }
;;;701      }
;;;702    #endif /* FLASH_BANK2_END */
;;;703    
;;;704      return status;
;;;705    }
00001a  4770              BX       lr
;;;706    
                          ENDP

                  |L14.28|
                          DCD      0x40022000
                  |L14.32|
                          DCD      0x45670123
                  |L14.36|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH|
#line 402
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX|
#line 587
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
