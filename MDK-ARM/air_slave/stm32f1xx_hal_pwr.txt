; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f1xx_hal_pwr.o --asm_dir=.\air_slave\ --list_dir=.\air_slave\ --depend=.\stm32f1xx_hal_pwr.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_air_slave -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\stm32f1xx_hal_pwr.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_ConfigPVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_ConfigPVD PROC
;;;331      */
;;;332    void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
000000  b530              PUSH     {r4,r5,lr}
;;;333    {
;;;334      /* Check the parameters */
;;;335      assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
;;;336      assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
;;;337    
;;;338      /* Set PLS[7:5] bits according to PVDLevel value */
;;;339      MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
000002  491c              LDR      r1,|L1.116|
000004  680a              LDR      r2,[r1,#0]
000006  6803              LDR      r3,[r0,#0]
000008  f02202e0          BIC      r2,r2,#0xe0
00000c  431a              ORRS     r2,r2,r3
00000e  600a              STR      r2,[r1,#0]
;;;340      
;;;341      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;342      __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
000010  4919              LDR      r1,|L1.120|
000012  680a              LDR      r2,[r1,#0]
000014  f4223280          BIC      r2,r2,#0x10000
000018  600a              STR      r2,[r1,#0]
;;;343      __HAL_PWR_PVD_EXTI_DISABLE_IT();
00001a  1f0c              SUBS     r4,r1,#4
00001c  6822              LDR      r2,[r4,#0]
00001e  f4223280          BIC      r2,r2,#0x10000
000022  6022              STR      r2,[r4,#0]
;;;344      __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
000024  4a14              LDR      r2,|L1.120|
000026  3208              ADDS     r2,r2,#8
000028  6813              LDR      r3,[r2,#0]
00002a  f4233380          BIC      r3,r3,#0x10000
00002e  6013              STR      r3,[r2,#0]
;;;345      __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
000030  1d0b              ADDS     r3,r1,#4
000032  681d              LDR      r5,[r3,#0]
000034  f4253580          BIC      r5,r5,#0x10000
000038  601d              STR      r5,[r3,#0]
;;;346    
;;;347      /* Configure interrupt mode */
;;;348      if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
00003a  6845              LDR      r5,[r0,#4]
00003c  03ed              LSLS     r5,r5,#15
00003e  d503              BPL      |L1.72|
;;;349      {
;;;350        __HAL_PWR_PVD_EXTI_ENABLE_IT();
000040  6825              LDR      r5,[r4,#0]
000042  f4453580          ORR      r5,r5,#0x10000
000046  6025              STR      r5,[r4,#0]
                  |L1.72|
;;;351      }
;;;352      
;;;353      /* Configure event mode */
;;;354      if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
000048  6844              LDR      r4,[r0,#4]
00004a  03a4              LSLS     r4,r4,#14
00004c  d503              BPL      |L1.86|
;;;355      {
;;;356        __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
00004e  680c              LDR      r4,[r1,#0]
000050  f4443480          ORR      r4,r4,#0x10000
000054  600c              STR      r4,[r1,#0]
                  |L1.86|
;;;357      }
;;;358      
;;;359      /* Configure the edge */
;;;360      if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
000056  7901              LDRB     r1,[r0,#4]
000058  07c9              LSLS     r1,r1,#31
00005a  d003              BEQ      |L1.100|
;;;361      {
;;;362        __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
00005c  6819              LDR      r1,[r3,#0]
00005e  f4413180          ORR      r1,r1,#0x10000
000062  6019              STR      r1,[r3,#0]
                  |L1.100|
;;;363      }
;;;364      
;;;365      if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
000064  7900              LDRB     r0,[r0,#4]
000066  0780              LSLS     r0,r0,#30
000068  d503              BPL      |L1.114|
;;;366      {
;;;367        __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
00006a  6810              LDR      r0,[r2,#0]
00006c  f4403080          ORR      r0,r0,#0x10000
000070  6010              STR      r0,[r2,#0]
                  |L1.114|
;;;368      }
;;;369    }
000072  bd30              POP      {r4,r5,pc}
;;;370    
                          ENDP

                  |L1.116|
                          DCD      0x40007000
                  |L1.120|
                          DCD      0x40010404

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;171      */
;;;172    void HAL_PWR_DeInit(void)
000000  4804              LDR      r0,|L2.20|
;;;173    {
;;;174      __HAL_RCC_PWR_FORCE_RESET();
000002  6901              LDR      r1,[r0,#0x10]
000004  f0415180          ORR      r1,r1,#0x10000000
000008  6101              STR      r1,[r0,#0x10]
;;;175      __HAL_RCC_PWR_RELEASE_RESET();
00000a  6901              LDR      r1,[r0,#0x10]
00000c  f0215180          BIC      r1,r1,#0x10000000
000010  6101              STR      r1,[r0,#0x10]
;;;176    }
000012  4770              BX       lr
;;;177    
                          ENDP

                  |L2.20|
                          DCD      0x40021000

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;197      */
;;;198    void HAL_PWR_DisableBkUpAccess(void)
000000  4901              LDR      r1,|L3.8|
;;;199    {
;;;200      /* Disable access to RTC and backup registers */
;;;201      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6208              STR      r0,[r1,#0x20]
;;;202    }
000006  4770              BX       lr
;;;203    
                          ENDP

                  |L3.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisablePVD PROC
;;;384      */
;;;385    void HAL_PWR_DisablePVD(void)
000000  4901              LDR      r1,|L4.8|
;;;386    {
;;;387      /* Disable the power voltage detector */
;;;388      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  6108              STR      r0,[r1,#0x10]
;;;389    }
000006  4770              BX       lr
;;;390    
                          ENDP

                  |L4.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSEVOnPend PROC
;;;582      */
;;;583    void HAL_PWR_DisableSEVOnPend(void)
000000  4802              LDR      r0,|L5.12|
;;;584    {
;;;585      /* Clear SEVONPEND bit of Cortex System Control Register */
;;;586      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;587    }
00000a  4770              BX       lr
;;;588    
                          ENDP

                  |L5.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSleepOnExit PROC
;;;556      */
;;;557    void HAL_PWR_DisableSleepOnExit(void)
000000  4802              LDR      r0,|L6.12|
;;;558    {
;;;559      /* Clear SLEEPONEXIT bit of Cortex System Control Register */
;;;560      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210102          BIC      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;561    }
00000a  4770              BX       lr
;;;562    
                          ENDP

                  |L6.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;412      */
;;;413    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  fa90f0a0          RBIT     r0,r0
;;;414    {
;;;415      /* Check the parameter */
;;;416      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;417      /* Disable the EWUPx pin */
;;;418      *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
000004  4a04              LDR      r2,|L7.24|
000006  fab0f080          CLZ      r0,r0
00000a  eb020080          ADD      r0,r2,r0,LSL #2
00000e  2100              MOVS     r1,#0
000010  f8c01080          STR      r1,[r0,#0x80]
;;;419    }
000014  4770              BX       lr
;;;420    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;184      */
;;;185    void HAL_PWR_EnableBkUpAccess(void)
000000  4901              LDR      r1,|L8.8|
;;;186    {
;;;187      /* Enable access to RTC and backup registers */
;;;188      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6208              STR      r0,[r1,#0x20]
;;;189    }
000006  4770              BX       lr
;;;190    
                          ENDP

                  |L8.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnablePVD PROC
;;;374      */
;;;375    void HAL_PWR_EnablePVD(void)
000000  4901              LDR      r1,|L9.8|
;;;376    {
;;;377      /* Enable the power voltage detector */
;;;378      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  6108              STR      r0,[r1,#0x10]
;;;379    }
000006  4770              BX       lr
;;;380    
                          ENDP

                  |L9.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSEVOnPend PROC
;;;569      */
;;;570    void HAL_PWR_EnableSEVOnPend(void)
000000  4802              LDR      r0,|L10.12|
;;;571    {
;;;572      /* Set SEVONPEND bit of Cortex System Control Register */
;;;573      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410110          ORR      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;574    }
00000a  4770              BX       lr
;;;575    
                          ENDP

                  |L10.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSleepOnExit PROC
;;;543      */
;;;544    void HAL_PWR_EnableSleepOnExit(void)
000000  4802              LDR      r0,|L11.12|
;;;545    {
;;;546      /* Set SLEEPONEXIT bit of Cortex System Control Register */
;;;547      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;548    }
00000a  4770              BX       lr
;;;549    
                          ENDP

                  |L11.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;397      */
;;;398    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
000000  fa90f0a0          RBIT     r0,r0
;;;399    {
;;;400      /* Check the parameter */
;;;401      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;402      /* Enable the EWUPx pin */
;;;403      *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
000004  4a04              LDR      r2,|L12.24|
000006  fab0f080          CLZ      r0,r0
00000a  eb020080          ADD      r0,r2,r0,LSL #2
00000e  2101              MOVS     r1,#1
000010  f8c01080          STR      r1,[r0,#0x80]
;;;404    }
000014  4770              BX       lr
;;;405    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSLEEPMode PROC
;;;432      */
;;;433    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  4806              LDR      r0,|L13.28|
;;;434    {
;;;435      /* Check the parameters */
;;;436      /* No check on Regulator because parameter not used in SLEEP mode */
;;;437      /* Prevent unused argument(s) compilation warning */
;;;438      UNUSED(Regulator);
;;;439    
;;;440      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;441    
;;;442      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;443      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000002  6802              LDR      r2,[r0,#0]
000004  f0220204          BIC      r2,r2,#4
000008  6002              STR      r2,[r0,#0]
;;;444    
;;;445      /* Select SLEEP mode entry -------------------------------------------------*/
;;;446      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
00000a  2901              CMP      r1,#1
00000c  d003              BEQ      |L13.22|
;;;447      {
;;;448        /* Request Wait For Interrupt */
;;;449        __WFI();
;;;450      }
;;;451      else
;;;452      {
;;;453        /* Request Wait For Event */
;;;454        __SEV();
00000e  bf40              SEV      
;;;455        __WFE();
000010  bf20              WFE      
;;;456        __WFE();
000012  bf20              WFE      
;;;457      }
;;;458    }
000014  4770              BX       lr
                  |L13.22|
000016  bf30              WFI                            ;449
000018  4770              BX       lr
;;;459    
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;518      */
;;;519    void HAL_PWR_EnterSTANDBYMode(void)
000000  4805              LDR      r0,|L14.24|
;;;520    {
;;;521      /* Select Standby mode */
;;;522      SET_BIT(PWR->CR, PWR_CR_PDDS);
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;523    
;;;524      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;525      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000a  4804              LDR      r0,|L14.28|
00000c  6801              LDR      r1,[r0,#0]
00000e  f0410104          ORR      r1,r1,#4
000012  6001              STR      r1,[r0,#0]
;;;526    
;;;527      /* This option is used to ensure that store operations are completed */
;;;528    #if defined ( __CC_ARM)
;;;529      __force_stores();
;;;530    #endif
;;;531      /* Request Wait For Interrupt */
;;;532      __WFI();
000014  bf30              WFI      
;;;533    }
000016  4770              BX       lr
;;;534    
                          ENDP

                  |L14.24|
                          DCD      0x40007000
                  |L14.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTOPMode PROC
;;;478      */
;;;479    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  4a0e              LDR      r2,|L15.60|
;;;480    {
000002  b510              PUSH     {r4,lr}
;;;481      /* Check the parameters */
;;;482      assert_param(IS_PWR_REGULATOR(Regulator));
;;;483      assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;484    
;;;485      /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
;;;486      CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
000004  6813              LDR      r3,[r2,#0]
000006  f0230302          BIC      r3,r3,#2
00000a  6013              STR      r3,[r2,#0]
;;;487    
;;;488      /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
;;;489      MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
00000c  6813              LDR      r3,[r2,#0]
00000e  f0230301          BIC      r3,r3,#1
000012  4303              ORRS     r3,r3,r0
000014  6013              STR      r3,[r2,#0]
;;;490    
;;;491      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;492      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000016  4c0a              LDR      r4,|L15.64|
000018  6820              LDR      r0,[r4,#0]
00001a  f0400004          ORR      r0,r0,#4
00001e  6020              STR      r0,[r4,#0]
;;;493    
;;;494      /* Select Stop mode entry --------------------------------------------------*/
;;;495      if(STOPEntry == PWR_STOPENTRY_WFI)
000020  2901              CMP      r1,#1
000022  d009              BEQ      |L15.56|
;;;496      {
;;;497        /* Request Wait For Interrupt */
;;;498        __WFI();
;;;499      }
;;;500      else
;;;501      {
;;;502        /* Request Wait For Event */
;;;503        __SEV();
000024  bf40              SEV      
;;;504        PWR_OverloadWfe(); /* WFE redefine locally */
000026  f7fffffe          BL       PWR_OverloadWfe
;;;505        PWR_OverloadWfe(); /* WFE redefine locally */
00002a  f7fffffe          BL       PWR_OverloadWfe
                  |L15.46|
;;;506      }
;;;507      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;508      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00002e  6820              LDR      r0,[r4,#0]
000030  f0200004          BIC      r0,r0,#4
000034  6020              STR      r0,[r4,#0]
;;;509    }
000036  bd10              POP      {r4,pc}
                  |L15.56|
000038  bf30              WFI                            ;498
00003a  e7f8              B        |L15.46|
;;;510    
                          ENDP

                  |L15.60|
                          DCD      0x40007000
                  |L15.64|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_PVDCallback||, CODE, READONLY, ALIGN=1

                  HAL_PWR_PVDCallback PROC
;;;612      */
;;;613    __weak void HAL_PWR_PVDCallback(void)
000000  4770              BX       lr
;;;614    {
;;;615      /* NOTE : This function Should not be modified, when the callback is needed,
;;;616                the HAL_PWR_PVDCallback could be implemented in the user file
;;;617       */ 
;;;618    }
;;;619    
                          ENDP


                          AREA ||i.HAL_PWR_PVD_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_PWR_PVD_IRQHandler PROC
;;;595      */
;;;596    void HAL_PWR_PVD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;597    {
;;;598      /* Check PWR exti flag */
;;;599      if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
000002  4c05              LDR      r4,|L17.24|
000004  6820              LDR      r0,[r4,#0]
000006  03c0              LSLS     r0,r0,#15
000008  d504              BPL      |L17.20|
;;;600      {
;;;601        /* PWR PVD interrupt user callback */
;;;602        HAL_PWR_PVDCallback();
00000a  f7fffffe          BL       HAL_PWR_PVDCallback
;;;603    
;;;604        /* Clear PWR Exti pending bit */
;;;605        __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
00000e  f44f3080          MOV      r0,#0x10000
000012  6020              STR      r0,[r4,#0]
                  |L17.20|
;;;606      }
;;;607    }
000014  bd10              POP      {r4,pc}
;;;608    
                          ENDP

000016  0000              DCW      0x0000
                  |L17.24|
                          DCD      0x40010414

                          AREA ||i.PWR_OverloadWfe||, CODE, READONLY, ALIGN=1

                  PWR_OverloadWfe PROC
                  ||__tagsym$$noinline||
;;;132    __NOINLINE
;;;133    static void PWR_OverloadWfe(void)
000000  bf20              WFE      
;;;134    {
;;;135      __asm volatile( "wfe" );
;;;136      __asm volatile( "nop" );
000002  bf00              NOP      
;;;137    }
000004  4770              BX       lr
;;;138    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REVSH|
#line 402
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____RRX|
#line 587
|__asm___19_stm32f1xx_hal_pwr_c_f2cfe8be____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
