; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f1xx_hal_cortex.o --asm_dir=.\air_slave\ --list_dir=.\air_slave\ --depend=.\stm32f1xx_hal_cortex.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_air_slave -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=525 -D_RTE_ -DSTM32F10X_MD -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=.\stm32f1xx_hal_cortex.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c]
                          THUMB

                          AREA ||i.HAL_NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_ClearPendingIRQ PROC
;;;435      */
;;;436    void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01280          STR      r1,[r0,#0x280]
;;;437    {
;;;438      /* Check the parameters */
;;;439      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;440    
;;;441      /* Clear pending interrupt */
;;;442      NVIC_ClearPendingIRQ(IRQn);
;;;443    }
000014  4770              BX       lr
;;;444    
                          ENDP


                          AREA ||i.HAL_NVIC_DisableIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_DisableIRQ PROC
;;;218      */
;;;219    void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01180          STR      r1,[r0,#0x180]
;;;220    {
;;;221      /* Check the parameters */
;;;222      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;223    
;;;224      /* Disable interrupt */
;;;225      NVIC_DisableIRQ(IRQn);
;;;226    }
000014  4770              BX       lr
;;;227    
                          ENDP


                          AREA ||i.HAL_NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_EnableIRQ PROC
;;;202      */
;;;203    void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01100          STR      r1,[r0,#0x100]
;;;204    {
;;;205      /* Check the parameters */
;;;206      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;207    
;;;208      /* Enable interrupt */
;;;209      NVIC_EnableIRQ(IRQn);
;;;210    }
000014  4770              BX       lr
;;;211    
                          ENDP


                          AREA ||i.HAL_NVIC_GetActive||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetActive PROC
;;;452      */
;;;453    uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
000000  0941              LSRS     r1,r0,#5
000002  0089              LSLS     r1,r1,#2
000004  f10121e0          ADD      r1,r1,#0xe000e000
000008  f8d11300          LDR      r1,[r1,#0x300]
00000c  f000021f          AND      r2,r0,#0x1f
000010  2001              MOVS     r0,#1
000012  4090              LSLS     r0,r0,r2
000014  4201              TST      r1,r0
;;;454    {
000016  d001              BEQ      |L4.28|
000018  2001              MOVS     r0,#1
;;;455      /* Check the parameters */
;;;456      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;457    
;;;458      /* Return 1 if active else 0 */
;;;459      return NVIC_GetActive(IRQn);
;;;460    }
00001a  4770              BX       lr
                  |L4.28|
00001c  2000              MOVS     r0,#0
00001e  4770              BX       lr
;;;461    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetPendingIRQ PROC
;;;419      */
;;;420    uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
000000  0941              LSRS     r1,r0,#5
000002  0089              LSLS     r1,r1,#2
000004  f10121e0          ADD      r1,r1,#0xe000e000
000008  f8d11200          LDR      r1,[r1,#0x200]
00000c  f000021f          AND      r2,r0,#0x1f
000010  2001              MOVS     r0,#1
000012  4090              LSLS     r0,r0,r2
000014  4201              TST      r1,r0
;;;421    {
000016  d001              BEQ      |L5.28|
000018  2001              MOVS     r0,#1
;;;422      /* Check the parameters */
;;;423      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;424    
;;;425      /* Return 1 if pending else 0 */
;;;426      return NVIC_GetPendingIRQ(IRQn);
;;;427    }
00001a  4770              BX       lr
                  |L5.28|
00001c  2000              MOVS     r0,#0
00001e  4770              BX       lr
;;;428    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPriority||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetPriority PROC
;;;386      */
;;;387    void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
000000  b570              PUSH     {r4-r6,lr}
000002  2800              CMP      r0,#0
;;;388    {
000004  da06              BGE      |L6.20|
000006  f000000f          AND      r0,r0,#0xf
00000a  f10020e0          ADD      r0,r0,#0xe000e000
00000e  f8900d14          LDRB     r0,[r0,#0xd14]
000012  e003              B        |L6.28|
                  |L6.20|
000014  f10020e0          ADD      r0,r0,#0xe000e000
000018  f8900400          LDRB     r0,[r0,#0x400]
                  |L6.28|
00001c  0904              LSRS     r4,r0,#4
00001e  f0010007          AND      r0,r1,#7
000022  f1c00507          RSB      r5,r0,#7
000026  2d04              CMP      r5,#4
000028  d900              BLS      |L6.44|
00002a  2504              MOVS     r5,#4
                  |L6.44|
00002c  1d01              ADDS     r1,r0,#4
00002e  2907              CMP      r1,#7
000030  d201              BCS      |L6.54|
000032  2000              MOVS     r0,#0
000034  e000              B        |L6.56|
                  |L6.54|
000036  1ec0              SUBS     r0,r0,#3
                  |L6.56|
000038  2101              MOVS     r1,#1
00003a  fa24f600          LSR      r6,r4,r0
00003e  fa01f505          LSL      r5,r1,r5
000042  1e6d              SUBS     r5,r5,#1
000044  402e              ANDS     r6,r6,r5
000046  4081              LSLS     r1,r1,r0
000048  1e49              SUBS     r1,r1,#1
00004a  4021              ANDS     r1,r1,r4
00004c  6016              STR      r6,[r2,#0]
00004e  6019              STR      r1,[r3,#0]
;;;389      /* Check the parameters */
;;;390      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;391     /* Get priority for Cortex-M system or device specific interrupts */
;;;392      NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
;;;393    }
000050  bd70              POP      {r4-r6,pc}
;;;394    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPriorityGrouping PROC
;;;359      */
;;;360    uint32_t HAL_NVIC_GetPriorityGrouping(void)
000000  4802              LDR      r0,|L7.12|
;;;361    {
;;;362      /* Get the PRIGROUP[10:8] field value */
;;;363      return NVIC_GetPriorityGrouping();
000002  6800              LDR      r0,[r0,#0]
000004  f3c02002          UBFX     r0,r0,#8,#3
;;;364    }
000008  4770              BX       lr
;;;365    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0xe000ed0c

                          AREA ||i.HAL_NVIC_SetPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_SetPendingIRQ PROC
;;;401      */
;;;402    void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01200          STR      r1,[r0,#0x200]
;;;403    {
;;;404      /* Check the parameters */
;;;405      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;406      
;;;407      /* Set interrupt pending */
;;;408      NVIC_SetPendingIRQ(IRQn);
;;;409    }
000014  4770              BX       lr
;;;410    
                          ENDP


                          AREA ||i.HAL_NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriority PROC
;;;180      */
;;;181    void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
000000  b4f0              PUSH     {r4-r7}
000002  4b0e              LDR      r3,|L9.60|
000004  681b              LDR      r3,[r3,#0]
;;;182    { 
;;;183      uint32_t prioritygroup = 0x00U;
;;;184      
;;;185      /* Check the parameters */
;;;186      assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
;;;187      assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
;;;188      
;;;189      prioritygroup = NVIC_GetPriorityGrouping();
;;;190      
;;;191      NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
000006  460c              MOV      r4,r1
000008  f3c32302          UBFX     r3,r3,#8,#3
00000c  f1c30507          RSB      r5,r3,#7
000010  2d04              CMP      r5,#4
000012  d900              BLS      |L9.22|
000014  2504              MOVS     r5,#4                 ;182
                  |L9.22|
000016  1d19              ADDS     r1,r3,#4              ;182
000018  2907              CMP      r1,#7                 ;182
00001a  d201              BCS      |L9.32|
00001c  2300              MOVS     r3,#0                 ;182
00001e  e000              B        |L9.34|
                  |L9.32|
000020  1edb              SUBS     r3,r3,#3              ;182
                  |L9.34|
000022  2601              MOVS     r6,#1                 ;182
000024  fa06f105          LSL      r1,r6,r5              ;182
000028  1e49              SUBS     r1,r1,#1              ;182
00002a  4021              ANDS     r1,r1,r4              ;182
00002c  4099              LSLS     r1,r1,r3              ;182
00002e  409e              LSLS     r6,r6,r3              ;182
000030  1e76              SUBS     r6,r6,#1              ;182
000032  4016              ANDS     r6,r6,r2              ;182
000034  4331              ORRS     r1,r1,r6              ;182
000036  bcf0              POP      {r4-r7}
000038  f7ffbffe          B.W      NVIC_SetPriority
;;;192    }
;;;193    
                          ENDP

                  |L9.60|
                          DCD      0xe000ed0c

                          AREA ||i.HAL_NVIC_SetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriorityGrouping PROC
;;;158      */
;;;159    void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
000000  4906              LDR      r1,|L10.28|
000002  f0000207          AND      r2,r0,#7
000006  6808              LDR      r0,[r1,#0]
000008  f64f03ff          MOV      r3,#0xf8ff
00000c  4018              ANDS     r0,r0,r3
00000e  ea402002          ORR      r0,r0,r2,LSL #8
000012  4a03              LDR      r2,|L10.32|
000014  4310              ORRS     r0,r0,r2
000016  6008              STR      r0,[r1,#0]
;;;160    {
;;;161      /* Check the parameters */
;;;162      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;163      
;;;164      /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
;;;165      NVIC_SetPriorityGrouping(PriorityGroup);
;;;166    }
000018  4770              BX       lr
;;;167    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0xe000ed0c
                  |L10.32|
                          DCD      0x05fa0000

                          AREA ||i.HAL_NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SystemReset PROC
;;;231      */
;;;232    void HAL_NVIC_SystemReset(void)
000000  f3bf8f4f          DSB      
000004  4805              LDR      r0,|L11.28|
000006  6801              LDR      r1,[r0,#0]
000008  4a05              LDR      r2,|L11.32|
00000a  f40161e0          AND      r1,r1,#0x700
00000e  4311              ORRS     r1,r1,r2
000010  6001              STR      r1,[r0,#0]
000012  f3bf8f4f          DSB      
                  |L11.22|
000016  bf00              NOP      
000018  e7fd              B        |L11.22|
;;;233    {
;;;234      /* System Reset */
;;;235      NVIC_SystemReset();
;;;236    }
;;;237    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0xe000ed0c
                  |L11.32|
                          DCD      0x05fa0004

                          AREA ||i.HAL_SYSTICK_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_CLKSourceConfig PROC
;;;469      */
;;;470    void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;471    {
;;;472      /* Check the parameters */
;;;473      assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
;;;474      if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
000004  2804              CMP      r0,#4
;;;475      {
;;;476        SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
;;;477      }
;;;478      else
;;;479      {
;;;480        SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
000006  6908              LDR      r0,[r1,#0x10]
000008  d003              BEQ      |L12.18|
00000a  f0200004          BIC      r0,r0,#4
                  |L12.14|
00000e  6108              STR      r0,[r1,#0x10]         ;476
;;;481      }
;;;482    }
000010  4770              BX       lr
                  |L12.18|
000012  f0400004          ORR      r0,r0,#4              ;476
000016  e7fa              B        |L12.14|
;;;483    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Callback||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Callback PROC
;;;496      */
;;;497    __weak void HAL_SYSTICK_Callback(void)
000000  4770              BX       lr
;;;498    {
;;;499      /* NOTE : This function Should not be modified, when the callback is needed,
;;;500                the HAL_SYSTICK_Callback could be implemented in the user file
;;;501       */
;;;502    }
;;;503    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Config||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Config PROC
;;;244      */
;;;245    uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
000000  b510              PUSH     {r4,lr}
;;;246    {
000002  1e40              SUBS     r0,r0,#1
000004  f1b07f80          CMP      r0,#0x1000000
000008  d301              BCC      |L14.14|
00000a  2001              MOVS     r0,#1
;;;247       return SysTick_Config(TicksNumb);
;;;248    }
00000c  bd10              POP      {r4,pc}
                  |L14.14|
00000e  f04f24e0          MOV      r4,#0xe000e000
000012  6160              STR      r0,[r4,#0x14]
000014  210f              MOVS     r1,#0xf
000016  1760              ASRS     r0,r4,#29
000018  f7fffffe          BL       NVIC_SetPriority
00001c  2000              MOVS     r0,#0
00001e  61a0              STR      r0,[r4,#0x18]
000020  2007              MOVS     r0,#7
000022  6120              STR      r0,[r4,#0x10]
000024  2000              MOVS     r0,#0
000026  bd10              POP      {r4,pc}
;;;249    /**
                          ENDP


                          AREA ||i.HAL_SYSTICK_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_IRQHandler PROC
;;;487      */
;;;488    void HAL_SYSTICK_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;489    {
;;;490      HAL_SYSTICK_Callback();
000002  f7fffffe          BL       HAL_SYSTICK_Callback
;;;491    }
000006  bd10              POP      {r4,pc}
;;;492    
                          ENDP


                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=1

                  NVIC_SetPriority PROC
;;;1523    */
;;;1524   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0709              LSLS     r1,r1,#28
;;;1525   {
;;;1526     if ((int32_t)(IRQn) < 0)
;;;1527     {
;;;1528       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000002  0e09              LSRS     r1,r1,#24
000004  2800              CMP      r0,#0                 ;1526
000006  da06              BGE      |L16.22|
000008  f000000f          AND      r0,r0,#0xf
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8801d14          STRB     r1,[r0,#0xd14]
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
;;;1533     }
;;;1534   }
000014  4770              BX       lr
                  |L16.22|
000016  f10020e0          ADD      r0,r0,#0xe000e000
00001a  f8801400          STRB     r1,[r0,#0x400]        ;1532
00001e  4770              BX       lr
;;;1535   
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REVSH|
#line 402
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____RRX|
#line 587
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
